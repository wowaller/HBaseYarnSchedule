/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.llama.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TResource implements org.apache.thrift.TBase<TResource, TResource._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResource");

  private static final org.apache.thrift.protocol.TField CLIENT_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_resource_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField V_CPU_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("v_cpu_cores", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField MEMORY_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_mb", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ASKED_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("askedLocation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENFORCEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("enforcement", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceTupleSchemeFactory());
  }

  public TUniqueId client_resource_id; // required
  public short v_cpu_cores; // required
  public int memory_mb; // required
  public String askedLocation; // required
  /**
   * 
   * @see TLocationEnforcement
   */
  public TLocationEnforcement enforcement; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_RESOURCE_ID((short)1, "client_resource_id"),
    V_CPU_CORES((short)2, "v_cpu_cores"),
    MEMORY_MB((short)3, "memory_mb"),
    ASKED_LOCATION((short)4, "askedLocation"),
    /**
     * 
     * @see TLocationEnforcement
     */
    ENFORCEMENT((short)5, "enforcement");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_RESOURCE_ID
          return CLIENT_RESOURCE_ID;
        case 2: // V_CPU_CORES
          return V_CPU_CORES;
        case 3: // MEMORY_MB
          return MEMORY_MB;
        case 4: // ASKED_LOCATION
          return ASKED_LOCATION;
        case 5: // ENFORCEMENT
          return ENFORCEMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __V_CPU_CORES_ISSET_ID = 0;
  private static final int __MEMORY_MB_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("client_resource_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class)));
    tmpMap.put(_Fields.V_CPU_CORES, new org.apache.thrift.meta_data.FieldMetaData("v_cpu_cores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MEMORY_MB, new org.apache.thrift.meta_data.FieldMetaData("memory_mb", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASKED_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("askedLocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENFORCEMENT, new org.apache.thrift.meta_data.FieldMetaData("enforcement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLocationEnforcement.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResource.class, metaDataMap);
  }

  public TResource() {
  }

  public TResource(
    TUniqueId client_resource_id,
    short v_cpu_cores,
    int memory_mb,
    String askedLocation,
    TLocationEnforcement enforcement)
  {
    this();
    this.client_resource_id = client_resource_id;
    this.v_cpu_cores = v_cpu_cores;
    setV_cpu_coresIsSet(true);
    this.memory_mb = memory_mb;
    setMemory_mbIsSet(true);
    this.askedLocation = askedLocation;
    this.enforcement = enforcement;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResource(TResource other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClient_resource_id()) {
      this.client_resource_id = new TUniqueId(other.client_resource_id);
    }
    this.v_cpu_cores = other.v_cpu_cores;
    this.memory_mb = other.memory_mb;
    if (other.isSetAskedLocation()) {
      this.askedLocation = other.askedLocation;
    }
    if (other.isSetEnforcement()) {
      this.enforcement = other.enforcement;
    }
  }

  public TResource deepCopy() {
    return new TResource(this);
  }

  @Override
  public void clear() {
    this.client_resource_id = null;
    setV_cpu_coresIsSet(false);
    this.v_cpu_cores = 0;
    setMemory_mbIsSet(false);
    this.memory_mb = 0;
    this.askedLocation = null;
    this.enforcement = null;
  }

  public TUniqueId getClient_resource_id() {
    return this.client_resource_id;
  }

  public TResource setClient_resource_id(TUniqueId client_resource_id) {
    this.client_resource_id = client_resource_id;
    return this;
  }

  public void unsetClient_resource_id() {
    this.client_resource_id = null;
  }

  /** Returns true if field client_resource_id is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_resource_id() {
    return this.client_resource_id != null;
  }

  public void setClient_resource_idIsSet(boolean value) {
    if (!value) {
      this.client_resource_id = null;
    }
  }

  public short getV_cpu_cores() {
    return this.v_cpu_cores;
  }

  public TResource setV_cpu_cores(short v_cpu_cores) {
    this.v_cpu_cores = v_cpu_cores;
    setV_cpu_coresIsSet(true);
    return this;
  }

  public void unsetV_cpu_cores() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __V_CPU_CORES_ISSET_ID);
  }

  /** Returns true if field v_cpu_cores is set (has been assigned a value) and false otherwise */
  public boolean isSetV_cpu_cores() {
    return EncodingUtils.testBit(__isset_bitfield, __V_CPU_CORES_ISSET_ID);
  }

  public void setV_cpu_coresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __V_CPU_CORES_ISSET_ID, value);
  }

  public int getMemory_mb() {
    return this.memory_mb;
  }

  public TResource setMemory_mb(int memory_mb) {
    this.memory_mb = memory_mb;
    setMemory_mbIsSet(true);
    return this;
  }

  public void unsetMemory_mb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORY_MB_ISSET_ID);
  }

  /** Returns true if field memory_mb is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_mb() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMORY_MB_ISSET_ID);
  }

  public void setMemory_mbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORY_MB_ISSET_ID, value);
  }

  public String getAskedLocation() {
    return this.askedLocation;
  }

  public TResource setAskedLocation(String askedLocation) {
    this.askedLocation = askedLocation;
    return this;
  }

  public void unsetAskedLocation() {
    this.askedLocation = null;
  }

  /** Returns true if field askedLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetAskedLocation() {
    return this.askedLocation != null;
  }

  public void setAskedLocationIsSet(boolean value) {
    if (!value) {
      this.askedLocation = null;
    }
  }

  /**
   * 
   * @see TLocationEnforcement
   */
  public TLocationEnforcement getEnforcement() {
    return this.enforcement;
  }

  /**
   * 
   * @see TLocationEnforcement
   */
  public TResource setEnforcement(TLocationEnforcement enforcement) {
    this.enforcement = enforcement;
    return this;
  }

  public void unsetEnforcement() {
    this.enforcement = null;
  }

  /** Returns true if field enforcement is set (has been assigned a value) and false otherwise */
  public boolean isSetEnforcement() {
    return this.enforcement != null;
  }

  public void setEnforcementIsSet(boolean value) {
    if (!value) {
      this.enforcement = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_RESOURCE_ID:
      if (value == null) {
        unsetClient_resource_id();
      } else {
        setClient_resource_id((TUniqueId)value);
      }
      break;

    case V_CPU_CORES:
      if (value == null) {
        unsetV_cpu_cores();
      } else {
        setV_cpu_cores((Short)value);
      }
      break;

    case MEMORY_MB:
      if (value == null) {
        unsetMemory_mb();
      } else {
        setMemory_mb((Integer)value);
      }
      break;

    case ASKED_LOCATION:
      if (value == null) {
        unsetAskedLocation();
      } else {
        setAskedLocation((String)value);
      }
      break;

    case ENFORCEMENT:
      if (value == null) {
        unsetEnforcement();
      } else {
        setEnforcement((TLocationEnforcement)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_RESOURCE_ID:
      return getClient_resource_id();

    case V_CPU_CORES:
      return Short.valueOf(getV_cpu_cores());

    case MEMORY_MB:
      return Integer.valueOf(getMemory_mb());

    case ASKED_LOCATION:
      return getAskedLocation();

    case ENFORCEMENT:
      return getEnforcement();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_RESOURCE_ID:
      return isSetClient_resource_id();
    case V_CPU_CORES:
      return isSetV_cpu_cores();
    case MEMORY_MB:
      return isSetMemory_mb();
    case ASKED_LOCATION:
      return isSetAskedLocation();
    case ENFORCEMENT:
      return isSetEnforcement();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResource)
      return this.equals((TResource)that);
    return false;
  }

  public boolean equals(TResource that) {
    if (that == null)
      return false;

    boolean this_present_client_resource_id = true && this.isSetClient_resource_id();
    boolean that_present_client_resource_id = true && that.isSetClient_resource_id();
    if (this_present_client_resource_id || that_present_client_resource_id) {
      if (!(this_present_client_resource_id && that_present_client_resource_id))
        return false;
      if (!this.client_resource_id.equals(that.client_resource_id))
        return false;
    }

    boolean this_present_v_cpu_cores = true;
    boolean that_present_v_cpu_cores = true;
    if (this_present_v_cpu_cores || that_present_v_cpu_cores) {
      if (!(this_present_v_cpu_cores && that_present_v_cpu_cores))
        return false;
      if (this.v_cpu_cores != that.v_cpu_cores)
        return false;
    }

    boolean this_present_memory_mb = true;
    boolean that_present_memory_mb = true;
    if (this_present_memory_mb || that_present_memory_mb) {
      if (!(this_present_memory_mb && that_present_memory_mb))
        return false;
      if (this.memory_mb != that.memory_mb)
        return false;
    }

    boolean this_present_askedLocation = true && this.isSetAskedLocation();
    boolean that_present_askedLocation = true && that.isSetAskedLocation();
    if (this_present_askedLocation || that_present_askedLocation) {
      if (!(this_present_askedLocation && that_present_askedLocation))
        return false;
      if (!this.askedLocation.equals(that.askedLocation))
        return false;
    }

    boolean this_present_enforcement = true && this.isSetEnforcement();
    boolean that_present_enforcement = true && that.isSetEnforcement();
    if (this_present_enforcement || that_present_enforcement) {
      if (!(this_present_enforcement && that_present_enforcement))
        return false;
      if (!this.enforcement.equals(that.enforcement))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TResource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TResource typedOther = (TResource)other;

    lastComparison = Boolean.valueOf(isSetClient_resource_id()).compareTo(typedOther.isSetClient_resource_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_resource_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_resource_id, typedOther.client_resource_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetV_cpu_cores()).compareTo(typedOther.isSetV_cpu_cores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV_cpu_cores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_cpu_cores, typedOther.v_cpu_cores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemory_mb()).compareTo(typedOther.isSetMemory_mb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_mb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_mb, typedOther.memory_mb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskedLocation()).compareTo(typedOther.isSetAskedLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskedLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askedLocation, typedOther.askedLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnforcement()).compareTo(typedOther.isSetEnforcement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnforcement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enforcement, typedOther.enforcement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResource(");
    boolean first = true;

    sb.append("client_resource_id:");
    if (this.client_resource_id == null) {
      sb.append("null");
    } else {
      sb.append(this.client_resource_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("v_cpu_cores:");
    sb.append(this.v_cpu_cores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory_mb:");
    sb.append(this.memory_mb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("askedLocation:");
    if (this.askedLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.askedLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enforcement:");
    if (this.enforcement == null) {
      sb.append("null");
    } else {
      sb.append(this.enforcement);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (client_resource_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'client_resource_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'v_cpu_cores' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'memory_mb' because it's a primitive and you chose the non-beans generator.
    if (askedLocation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'askedLocation' was not present! Struct: " + toString());
    }
    if (enforcement == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enforcement' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (client_resource_id != null) {
      client_resource_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceStandardSchemeFactory implements SchemeFactory {
    public TResourceStandardScheme getScheme() {
      return new TResourceStandardScheme();
    }
  }

  private static class TResourceStandardScheme extends StandardScheme<TResource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.client_resource_id = new TUniqueId();
              struct.client_resource_id.read(iprot);
              struct.setClient_resource_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // V_CPU_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.v_cpu_cores = iprot.readI16();
              struct.setV_cpu_coresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMORY_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memory_mb = iprot.readI32();
              struct.setMemory_mbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASKED_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.askedLocation = iprot.readString();
              struct.setAskedLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENFORCEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enforcement = TLocationEnforcement.findByValue(iprot.readI32());
              struct.setEnforcementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetV_cpu_cores()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'v_cpu_cores' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMemory_mb()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memory_mb' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.client_resource_id != null) {
        oprot.writeFieldBegin(CLIENT_RESOURCE_ID_FIELD_DESC);
        struct.client_resource_id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(V_CPU_CORES_FIELD_DESC);
      oprot.writeI16(struct.v_cpu_cores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_MB_FIELD_DESC);
      oprot.writeI32(struct.memory_mb);
      oprot.writeFieldEnd();
      if (struct.askedLocation != null) {
        oprot.writeFieldBegin(ASKED_LOCATION_FIELD_DESC);
        oprot.writeString(struct.askedLocation);
        oprot.writeFieldEnd();
      }
      if (struct.enforcement != null) {
        oprot.writeFieldBegin(ENFORCEMENT_FIELD_DESC);
        oprot.writeI32(struct.enforcement.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceTupleSchemeFactory implements SchemeFactory {
    public TResourceTupleScheme getScheme() {
      return new TResourceTupleScheme();
    }
  }

  private static class TResourceTupleScheme extends TupleScheme<TResource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResource struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.client_resource_id.write(oprot);
      oprot.writeI16(struct.v_cpu_cores);
      oprot.writeI32(struct.memory_mb);
      oprot.writeString(struct.askedLocation);
      oprot.writeI32(struct.enforcement.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResource struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.client_resource_id = new TUniqueId();
      struct.client_resource_id.read(iprot);
      struct.setClient_resource_idIsSet(true);
      struct.v_cpu_cores = iprot.readI16();
      struct.setV_cpu_coresIsSet(true);
      struct.memory_mb = iprot.readI32();
      struct.setMemory_mbIsSet(true);
      struct.askedLocation = iprot.readString();
      struct.setAskedLocationIsSet(true);
      struct.enforcement = TLocationEnforcement.findByValue(iprot.readI32());
      struct.setEnforcementIsSet(true);
    }
  }

}

