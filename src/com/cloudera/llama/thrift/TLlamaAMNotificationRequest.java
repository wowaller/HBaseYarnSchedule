/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.llama.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TLlamaAMNotificationRequest implements org.apache.thrift.TBase<TLlamaAMNotificationRequest, TLlamaAMNotificationRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLlamaAMNotificationRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AM_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("am_handle", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField HEARTBEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeat", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ALLOCATED_RESERVATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("allocated_reservation_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ALLOCATED_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("allocated_resources", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField REJECTED_RESERVATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rejected_reservation_ids", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField REJECTED_CLIENT_RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rejected_client_resource_ids", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LOST_CLIENT_RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lost_client_resource_ids", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PREEMPTED_RESERVATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("preempted_reservation_ids", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PREEMPTED_CLIENT_RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("preempted_client_resource_ids", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ADMIN_RELEASED_RESERVATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("admin_released_reservation_ids", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LOST_RESERVATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lost_reservation_ids", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLlamaAMNotificationRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLlamaAMNotificationRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion version; // required
  public TUniqueId am_handle; // required
  public boolean heartbeat; // required
  public List<TUniqueId> allocated_reservation_ids; // optional
  public List<TAllocatedResource> allocated_resources; // optional
  public List<TUniqueId> rejected_reservation_ids; // optional
  public List<TUniqueId> rejected_client_resource_ids; // optional
  public List<TUniqueId> lost_client_resource_ids; // optional
  public List<TUniqueId> preempted_reservation_ids; // optional
  public List<TUniqueId> preempted_client_resource_ids; // optional
  public List<TUniqueId> admin_released_reservation_ids; // optional
  public List<TUniqueId> lost_reservation_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TLlamaServiceVersion
     */
    VERSION((short)1, "version"),
    AM_HANDLE((short)2, "am_handle"),
    HEARTBEAT((short)3, "heartbeat"),
    ALLOCATED_RESERVATION_IDS((short)4, "allocated_reservation_ids"),
    ALLOCATED_RESOURCES((short)5, "allocated_resources"),
    REJECTED_RESERVATION_IDS((short)6, "rejected_reservation_ids"),
    REJECTED_CLIENT_RESOURCE_IDS((short)7, "rejected_client_resource_ids"),
    LOST_CLIENT_RESOURCE_IDS((short)8, "lost_client_resource_ids"),
    PREEMPTED_RESERVATION_IDS((short)9, "preempted_reservation_ids"),
    PREEMPTED_CLIENT_RESOURCE_IDS((short)10, "preempted_client_resource_ids"),
    ADMIN_RELEASED_RESERVATION_IDS((short)11, "admin_released_reservation_ids"),
    LOST_RESERVATION_IDS((short)12, "lost_reservation_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // AM_HANDLE
          return AM_HANDLE;
        case 3: // HEARTBEAT
          return HEARTBEAT;
        case 4: // ALLOCATED_RESERVATION_IDS
          return ALLOCATED_RESERVATION_IDS;
        case 5: // ALLOCATED_RESOURCES
          return ALLOCATED_RESOURCES;
        case 6: // REJECTED_RESERVATION_IDS
          return REJECTED_RESERVATION_IDS;
        case 7: // REJECTED_CLIENT_RESOURCE_IDS
          return REJECTED_CLIENT_RESOURCE_IDS;
        case 8: // LOST_CLIENT_RESOURCE_IDS
          return LOST_CLIENT_RESOURCE_IDS;
        case 9: // PREEMPTED_RESERVATION_IDS
          return PREEMPTED_RESERVATION_IDS;
        case 10: // PREEMPTED_CLIENT_RESOURCE_IDS
          return PREEMPTED_CLIENT_RESOURCE_IDS;
        case 11: // ADMIN_RELEASED_RESERVATION_IDS
          return ADMIN_RELEASED_RESERVATION_IDS;
        case 12: // LOST_RESERVATION_IDS
          return LOST_RESERVATION_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEARTBEAT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ALLOCATED_RESERVATION_IDS, _Fields.ALLOCATED_RESOURCES, _Fields.REJECTED_RESERVATION_IDS, _Fields.REJECTED_CLIENT_RESOURCE_IDS, _Fields.LOST_CLIENT_RESOURCE_IDS, _Fields.PREEMPTED_RESERVATION_IDS, _Fields.PREEMPTED_CLIENT_RESOURCE_IDS, _Fields.ADMIN_RELEASED_RESERVATION_IDS, _Fields.LOST_RESERVATION_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLlamaServiceVersion.class)));
    tmpMap.put(_Fields.AM_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("am_handle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class)));
    tmpMap.put(_Fields.HEARTBEAT, new org.apache.thrift.meta_data.FieldMetaData("heartbeat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOCATED_RESERVATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("allocated_reservation_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.ALLOCATED_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("allocated_resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAllocatedResource.class))));
    tmpMap.put(_Fields.REJECTED_RESERVATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("rejected_reservation_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.REJECTED_CLIENT_RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("rejected_client_resource_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.LOST_CLIENT_RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("lost_client_resource_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.PREEMPTED_RESERVATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("preempted_reservation_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.PREEMPTED_CLIENT_RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("preempted_client_resource_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.ADMIN_RELEASED_RESERVATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("admin_released_reservation_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.LOST_RESERVATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("lost_reservation_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLlamaAMNotificationRequest.class, metaDataMap);
  }

  public TLlamaAMNotificationRequest() {
  }

  public TLlamaAMNotificationRequest(
    TLlamaServiceVersion version,
    TUniqueId am_handle,
    boolean heartbeat)
  {
    this();
    this.version = version;
    this.am_handle = am_handle;
    this.heartbeat = heartbeat;
    setHeartbeatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLlamaAMNotificationRequest(TLlamaAMNotificationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetAm_handle()) {
      this.am_handle = new TUniqueId(other.am_handle);
    }
    this.heartbeat = other.heartbeat;
    if (other.isSetAllocated_reservation_ids()) {
      List<TUniqueId> __this__allocated_reservation_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.allocated_reservation_ids) {
        __this__allocated_reservation_ids.add(new TUniqueId(other_element));
      }
      this.allocated_reservation_ids = __this__allocated_reservation_ids;
    }
    if (other.isSetAllocated_resources()) {
      List<TAllocatedResource> __this__allocated_resources = new ArrayList<TAllocatedResource>();
      for (TAllocatedResource other_element : other.allocated_resources) {
        __this__allocated_resources.add(new TAllocatedResource(other_element));
      }
      this.allocated_resources = __this__allocated_resources;
    }
    if (other.isSetRejected_reservation_ids()) {
      List<TUniqueId> __this__rejected_reservation_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.rejected_reservation_ids) {
        __this__rejected_reservation_ids.add(new TUniqueId(other_element));
      }
      this.rejected_reservation_ids = __this__rejected_reservation_ids;
    }
    if (other.isSetRejected_client_resource_ids()) {
      List<TUniqueId> __this__rejected_client_resource_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.rejected_client_resource_ids) {
        __this__rejected_client_resource_ids.add(new TUniqueId(other_element));
      }
      this.rejected_client_resource_ids = __this__rejected_client_resource_ids;
    }
    if (other.isSetLost_client_resource_ids()) {
      List<TUniqueId> __this__lost_client_resource_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.lost_client_resource_ids) {
        __this__lost_client_resource_ids.add(new TUniqueId(other_element));
      }
      this.lost_client_resource_ids = __this__lost_client_resource_ids;
    }
    if (other.isSetPreempted_reservation_ids()) {
      List<TUniqueId> __this__preempted_reservation_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.preempted_reservation_ids) {
        __this__preempted_reservation_ids.add(new TUniqueId(other_element));
      }
      this.preempted_reservation_ids = __this__preempted_reservation_ids;
    }
    if (other.isSetPreempted_client_resource_ids()) {
      List<TUniqueId> __this__preempted_client_resource_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.preempted_client_resource_ids) {
        __this__preempted_client_resource_ids.add(new TUniqueId(other_element));
      }
      this.preempted_client_resource_ids = __this__preempted_client_resource_ids;
    }
    if (other.isSetAdmin_released_reservation_ids()) {
      List<TUniqueId> __this__admin_released_reservation_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.admin_released_reservation_ids) {
        __this__admin_released_reservation_ids.add(new TUniqueId(other_element));
      }
      this.admin_released_reservation_ids = __this__admin_released_reservation_ids;
    }
    if (other.isSetLost_reservation_ids()) {
      List<TUniqueId> __this__lost_reservation_ids = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.lost_reservation_ids) {
        __this__lost_reservation_ids.add(new TUniqueId(other_element));
      }
      this.lost_reservation_ids = __this__lost_reservation_ids;
    }
  }

  public TLlamaAMNotificationRequest deepCopy() {
    return new TLlamaAMNotificationRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.am_handle = null;
    setHeartbeatIsSet(false);
    this.heartbeat = false;
    this.allocated_reservation_ids = null;
    this.allocated_resources = null;
    this.rejected_reservation_ids = null;
    this.rejected_client_resource_ids = null;
    this.lost_client_resource_ids = null;
    this.preempted_reservation_ids = null;
    this.preempted_client_resource_ids = null;
    this.admin_released_reservation_ids = null;
    this.lost_reservation_ids = null;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaAMNotificationRequest setVersion(TLlamaServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public TUniqueId getAm_handle() {
    return this.am_handle;
  }

  public TLlamaAMNotificationRequest setAm_handle(TUniqueId am_handle) {
    this.am_handle = am_handle;
    return this;
  }

  public void unsetAm_handle() {
    this.am_handle = null;
  }

  /** Returns true if field am_handle is set (has been assigned a value) and false otherwise */
  public boolean isSetAm_handle() {
    return this.am_handle != null;
  }

  public void setAm_handleIsSet(boolean value) {
    if (!value) {
      this.am_handle = null;
    }
  }

  public boolean isHeartbeat() {
    return this.heartbeat;
  }

  public TLlamaAMNotificationRequest setHeartbeat(boolean heartbeat) {
    this.heartbeat = heartbeat;
    setHeartbeatIsSet(true);
    return this;
  }

  public void unsetHeartbeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTBEAT_ISSET_ID);
  }

  /** Returns true if field heartbeat is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeat() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTBEAT_ISSET_ID);
  }

  public void setHeartbeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTBEAT_ISSET_ID, value);
  }

  public int getAllocated_reservation_idsSize() {
    return (this.allocated_reservation_ids == null) ? 0 : this.allocated_reservation_ids.size();
  }

  public java.util.Iterator<TUniqueId> getAllocated_reservation_idsIterator() {
    return (this.allocated_reservation_ids == null) ? null : this.allocated_reservation_ids.iterator();
  }

  public void addToAllocated_reservation_ids(TUniqueId elem) {
    if (this.allocated_reservation_ids == null) {
      this.allocated_reservation_ids = new ArrayList<TUniqueId>();
    }
    this.allocated_reservation_ids.add(elem);
  }

  public List<TUniqueId> getAllocated_reservation_ids() {
    return this.allocated_reservation_ids;
  }

  public TLlamaAMNotificationRequest setAllocated_reservation_ids(List<TUniqueId> allocated_reservation_ids) {
    this.allocated_reservation_ids = allocated_reservation_ids;
    return this;
  }

  public void unsetAllocated_reservation_ids() {
    this.allocated_reservation_ids = null;
  }

  /** Returns true if field allocated_reservation_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocated_reservation_ids() {
    return this.allocated_reservation_ids != null;
  }

  public void setAllocated_reservation_idsIsSet(boolean value) {
    if (!value) {
      this.allocated_reservation_ids = null;
    }
  }

  public int getAllocated_resourcesSize() {
    return (this.allocated_resources == null) ? 0 : this.allocated_resources.size();
  }

  public java.util.Iterator<TAllocatedResource> getAllocated_resourcesIterator() {
    return (this.allocated_resources == null) ? null : this.allocated_resources.iterator();
  }

  public void addToAllocated_resources(TAllocatedResource elem) {
    if (this.allocated_resources == null) {
      this.allocated_resources = new ArrayList<TAllocatedResource>();
    }
    this.allocated_resources.add(elem);
  }

  public List<TAllocatedResource> getAllocated_resources() {
    return this.allocated_resources;
  }

  public TLlamaAMNotificationRequest setAllocated_resources(List<TAllocatedResource> allocated_resources) {
    this.allocated_resources = allocated_resources;
    return this;
  }

  public void unsetAllocated_resources() {
    this.allocated_resources = null;
  }

  /** Returns true if field allocated_resources is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocated_resources() {
    return this.allocated_resources != null;
  }

  public void setAllocated_resourcesIsSet(boolean value) {
    if (!value) {
      this.allocated_resources = null;
    }
  }

  public int getRejected_reservation_idsSize() {
    return (this.rejected_reservation_ids == null) ? 0 : this.rejected_reservation_ids.size();
  }

  public java.util.Iterator<TUniqueId> getRejected_reservation_idsIterator() {
    return (this.rejected_reservation_ids == null) ? null : this.rejected_reservation_ids.iterator();
  }

  public void addToRejected_reservation_ids(TUniqueId elem) {
    if (this.rejected_reservation_ids == null) {
      this.rejected_reservation_ids = new ArrayList<TUniqueId>();
    }
    this.rejected_reservation_ids.add(elem);
  }

  public List<TUniqueId> getRejected_reservation_ids() {
    return this.rejected_reservation_ids;
  }

  public TLlamaAMNotificationRequest setRejected_reservation_ids(List<TUniqueId> rejected_reservation_ids) {
    this.rejected_reservation_ids = rejected_reservation_ids;
    return this;
  }

  public void unsetRejected_reservation_ids() {
    this.rejected_reservation_ids = null;
  }

  /** Returns true if field rejected_reservation_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetRejected_reservation_ids() {
    return this.rejected_reservation_ids != null;
  }

  public void setRejected_reservation_idsIsSet(boolean value) {
    if (!value) {
      this.rejected_reservation_ids = null;
    }
  }

  public int getRejected_client_resource_idsSize() {
    return (this.rejected_client_resource_ids == null) ? 0 : this.rejected_client_resource_ids.size();
  }

  public java.util.Iterator<TUniqueId> getRejected_client_resource_idsIterator() {
    return (this.rejected_client_resource_ids == null) ? null : this.rejected_client_resource_ids.iterator();
  }

  public void addToRejected_client_resource_ids(TUniqueId elem) {
    if (this.rejected_client_resource_ids == null) {
      this.rejected_client_resource_ids = new ArrayList<TUniqueId>();
    }
    this.rejected_client_resource_ids.add(elem);
  }

  public List<TUniqueId> getRejected_client_resource_ids() {
    return this.rejected_client_resource_ids;
  }

  public TLlamaAMNotificationRequest setRejected_client_resource_ids(List<TUniqueId> rejected_client_resource_ids) {
    this.rejected_client_resource_ids = rejected_client_resource_ids;
    return this;
  }

  public void unsetRejected_client_resource_ids() {
    this.rejected_client_resource_ids = null;
  }

  /** Returns true if field rejected_client_resource_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetRejected_client_resource_ids() {
    return this.rejected_client_resource_ids != null;
  }

  public void setRejected_client_resource_idsIsSet(boolean value) {
    if (!value) {
      this.rejected_client_resource_ids = null;
    }
  }

  public int getLost_client_resource_idsSize() {
    return (this.lost_client_resource_ids == null) ? 0 : this.lost_client_resource_ids.size();
  }

  public java.util.Iterator<TUniqueId> getLost_client_resource_idsIterator() {
    return (this.lost_client_resource_ids == null) ? null : this.lost_client_resource_ids.iterator();
  }

  public void addToLost_client_resource_ids(TUniqueId elem) {
    if (this.lost_client_resource_ids == null) {
      this.lost_client_resource_ids = new ArrayList<TUniqueId>();
    }
    this.lost_client_resource_ids.add(elem);
  }

  public List<TUniqueId> getLost_client_resource_ids() {
    return this.lost_client_resource_ids;
  }

  public TLlamaAMNotificationRequest setLost_client_resource_ids(List<TUniqueId> lost_client_resource_ids) {
    this.lost_client_resource_ids = lost_client_resource_ids;
    return this;
  }

  public void unsetLost_client_resource_ids() {
    this.lost_client_resource_ids = null;
  }

  /** Returns true if field lost_client_resource_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetLost_client_resource_ids() {
    return this.lost_client_resource_ids != null;
  }

  public void setLost_client_resource_idsIsSet(boolean value) {
    if (!value) {
      this.lost_client_resource_ids = null;
    }
  }

  public int getPreempted_reservation_idsSize() {
    return (this.preempted_reservation_ids == null) ? 0 : this.preempted_reservation_ids.size();
  }

  public java.util.Iterator<TUniqueId> getPreempted_reservation_idsIterator() {
    return (this.preempted_reservation_ids == null) ? null : this.preempted_reservation_ids.iterator();
  }

  public void addToPreempted_reservation_ids(TUniqueId elem) {
    if (this.preempted_reservation_ids == null) {
      this.preempted_reservation_ids = new ArrayList<TUniqueId>();
    }
    this.preempted_reservation_ids.add(elem);
  }

  public List<TUniqueId> getPreempted_reservation_ids() {
    return this.preempted_reservation_ids;
  }

  public TLlamaAMNotificationRequest setPreempted_reservation_ids(List<TUniqueId> preempted_reservation_ids) {
    this.preempted_reservation_ids = preempted_reservation_ids;
    return this;
  }

  public void unsetPreempted_reservation_ids() {
    this.preempted_reservation_ids = null;
  }

  /** Returns true if field preempted_reservation_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPreempted_reservation_ids() {
    return this.preempted_reservation_ids != null;
  }

  public void setPreempted_reservation_idsIsSet(boolean value) {
    if (!value) {
      this.preempted_reservation_ids = null;
    }
  }

  public int getPreempted_client_resource_idsSize() {
    return (this.preempted_client_resource_ids == null) ? 0 : this.preempted_client_resource_ids.size();
  }

  public java.util.Iterator<TUniqueId> getPreempted_client_resource_idsIterator() {
    return (this.preempted_client_resource_ids == null) ? null : this.preempted_client_resource_ids.iterator();
  }

  public void addToPreempted_client_resource_ids(TUniqueId elem) {
    if (this.preempted_client_resource_ids == null) {
      this.preempted_client_resource_ids = new ArrayList<TUniqueId>();
    }
    this.preempted_client_resource_ids.add(elem);
  }

  public List<TUniqueId> getPreempted_client_resource_ids() {
    return this.preempted_client_resource_ids;
  }

  public TLlamaAMNotificationRequest setPreempted_client_resource_ids(List<TUniqueId> preempted_client_resource_ids) {
    this.preempted_client_resource_ids = preempted_client_resource_ids;
    return this;
  }

  public void unsetPreempted_client_resource_ids() {
    this.preempted_client_resource_ids = null;
  }

  /** Returns true if field preempted_client_resource_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPreempted_client_resource_ids() {
    return this.preempted_client_resource_ids != null;
  }

  public void setPreempted_client_resource_idsIsSet(boolean value) {
    if (!value) {
      this.preempted_client_resource_ids = null;
    }
  }

  public int getAdmin_released_reservation_idsSize() {
    return (this.admin_released_reservation_ids == null) ? 0 : this.admin_released_reservation_ids.size();
  }

  public java.util.Iterator<TUniqueId> getAdmin_released_reservation_idsIterator() {
    return (this.admin_released_reservation_ids == null) ? null : this.admin_released_reservation_ids.iterator();
  }

  public void addToAdmin_released_reservation_ids(TUniqueId elem) {
    if (this.admin_released_reservation_ids == null) {
      this.admin_released_reservation_ids = new ArrayList<TUniqueId>();
    }
    this.admin_released_reservation_ids.add(elem);
  }

  public List<TUniqueId> getAdmin_released_reservation_ids() {
    return this.admin_released_reservation_ids;
  }

  public TLlamaAMNotificationRequest setAdmin_released_reservation_ids(List<TUniqueId> admin_released_reservation_ids) {
    this.admin_released_reservation_ids = admin_released_reservation_ids;
    return this;
  }

  public void unsetAdmin_released_reservation_ids() {
    this.admin_released_reservation_ids = null;
  }

  /** Returns true if field admin_released_reservation_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmin_released_reservation_ids() {
    return this.admin_released_reservation_ids != null;
  }

  public void setAdmin_released_reservation_idsIsSet(boolean value) {
    if (!value) {
      this.admin_released_reservation_ids = null;
    }
  }

  public int getLost_reservation_idsSize() {
    return (this.lost_reservation_ids == null) ? 0 : this.lost_reservation_ids.size();
  }

  public java.util.Iterator<TUniqueId> getLost_reservation_idsIterator() {
    return (this.lost_reservation_ids == null) ? null : this.lost_reservation_ids.iterator();
  }

  public void addToLost_reservation_ids(TUniqueId elem) {
    if (this.lost_reservation_ids == null) {
      this.lost_reservation_ids = new ArrayList<TUniqueId>();
    }
    this.lost_reservation_ids.add(elem);
  }

  public List<TUniqueId> getLost_reservation_ids() {
    return this.lost_reservation_ids;
  }

  public TLlamaAMNotificationRequest setLost_reservation_ids(List<TUniqueId> lost_reservation_ids) {
    this.lost_reservation_ids = lost_reservation_ids;
    return this;
  }

  public void unsetLost_reservation_ids() {
    this.lost_reservation_ids = null;
  }

  /** Returns true if field lost_reservation_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetLost_reservation_ids() {
    return this.lost_reservation_ids != null;
  }

  public void setLost_reservation_idsIsSet(boolean value) {
    if (!value) {
      this.lost_reservation_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TLlamaServiceVersion)value);
      }
      break;

    case AM_HANDLE:
      if (value == null) {
        unsetAm_handle();
      } else {
        setAm_handle((TUniqueId)value);
      }
      break;

    case HEARTBEAT:
      if (value == null) {
        unsetHeartbeat();
      } else {
        setHeartbeat((Boolean)value);
      }
      break;

    case ALLOCATED_RESERVATION_IDS:
      if (value == null) {
        unsetAllocated_reservation_ids();
      } else {
        setAllocated_reservation_ids((List<TUniqueId>)value);
      }
      break;

    case ALLOCATED_RESOURCES:
      if (value == null) {
        unsetAllocated_resources();
      } else {
        setAllocated_resources((List<TAllocatedResource>)value);
      }
      break;

    case REJECTED_RESERVATION_IDS:
      if (value == null) {
        unsetRejected_reservation_ids();
      } else {
        setRejected_reservation_ids((List<TUniqueId>)value);
      }
      break;

    case REJECTED_CLIENT_RESOURCE_IDS:
      if (value == null) {
        unsetRejected_client_resource_ids();
      } else {
        setRejected_client_resource_ids((List<TUniqueId>)value);
      }
      break;

    case LOST_CLIENT_RESOURCE_IDS:
      if (value == null) {
        unsetLost_client_resource_ids();
      } else {
        setLost_client_resource_ids((List<TUniqueId>)value);
      }
      break;

    case PREEMPTED_RESERVATION_IDS:
      if (value == null) {
        unsetPreempted_reservation_ids();
      } else {
        setPreempted_reservation_ids((List<TUniqueId>)value);
      }
      break;

    case PREEMPTED_CLIENT_RESOURCE_IDS:
      if (value == null) {
        unsetPreempted_client_resource_ids();
      } else {
        setPreempted_client_resource_ids((List<TUniqueId>)value);
      }
      break;

    case ADMIN_RELEASED_RESERVATION_IDS:
      if (value == null) {
        unsetAdmin_released_reservation_ids();
      } else {
        setAdmin_released_reservation_ids((List<TUniqueId>)value);
      }
      break;

    case LOST_RESERVATION_IDS:
      if (value == null) {
        unsetLost_reservation_ids();
      } else {
        setLost_reservation_ids((List<TUniqueId>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case AM_HANDLE:
      return getAm_handle();

    case HEARTBEAT:
      return Boolean.valueOf(isHeartbeat());

    case ALLOCATED_RESERVATION_IDS:
      return getAllocated_reservation_ids();

    case ALLOCATED_RESOURCES:
      return getAllocated_resources();

    case REJECTED_RESERVATION_IDS:
      return getRejected_reservation_ids();

    case REJECTED_CLIENT_RESOURCE_IDS:
      return getRejected_client_resource_ids();

    case LOST_CLIENT_RESOURCE_IDS:
      return getLost_client_resource_ids();

    case PREEMPTED_RESERVATION_IDS:
      return getPreempted_reservation_ids();

    case PREEMPTED_CLIENT_RESOURCE_IDS:
      return getPreempted_client_resource_ids();

    case ADMIN_RELEASED_RESERVATION_IDS:
      return getAdmin_released_reservation_ids();

    case LOST_RESERVATION_IDS:
      return getLost_reservation_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case AM_HANDLE:
      return isSetAm_handle();
    case HEARTBEAT:
      return isSetHeartbeat();
    case ALLOCATED_RESERVATION_IDS:
      return isSetAllocated_reservation_ids();
    case ALLOCATED_RESOURCES:
      return isSetAllocated_resources();
    case REJECTED_RESERVATION_IDS:
      return isSetRejected_reservation_ids();
    case REJECTED_CLIENT_RESOURCE_IDS:
      return isSetRejected_client_resource_ids();
    case LOST_CLIENT_RESOURCE_IDS:
      return isSetLost_client_resource_ids();
    case PREEMPTED_RESERVATION_IDS:
      return isSetPreempted_reservation_ids();
    case PREEMPTED_CLIENT_RESOURCE_IDS:
      return isSetPreempted_client_resource_ids();
    case ADMIN_RELEASED_RESERVATION_IDS:
      return isSetAdmin_released_reservation_ids();
    case LOST_RESERVATION_IDS:
      return isSetLost_reservation_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLlamaAMNotificationRequest)
      return this.equals((TLlamaAMNotificationRequest)that);
    return false;
  }

  public boolean equals(TLlamaAMNotificationRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_am_handle = true && this.isSetAm_handle();
    boolean that_present_am_handle = true && that.isSetAm_handle();
    if (this_present_am_handle || that_present_am_handle) {
      if (!(this_present_am_handle && that_present_am_handle))
        return false;
      if (!this.am_handle.equals(that.am_handle))
        return false;
    }

    boolean this_present_heartbeat = true;
    boolean that_present_heartbeat = true;
    if (this_present_heartbeat || that_present_heartbeat) {
      if (!(this_present_heartbeat && that_present_heartbeat))
        return false;
      if (this.heartbeat != that.heartbeat)
        return false;
    }

    boolean this_present_allocated_reservation_ids = true && this.isSetAllocated_reservation_ids();
    boolean that_present_allocated_reservation_ids = true && that.isSetAllocated_reservation_ids();
    if (this_present_allocated_reservation_ids || that_present_allocated_reservation_ids) {
      if (!(this_present_allocated_reservation_ids && that_present_allocated_reservation_ids))
        return false;
      if (!this.allocated_reservation_ids.equals(that.allocated_reservation_ids))
        return false;
    }

    boolean this_present_allocated_resources = true && this.isSetAllocated_resources();
    boolean that_present_allocated_resources = true && that.isSetAllocated_resources();
    if (this_present_allocated_resources || that_present_allocated_resources) {
      if (!(this_present_allocated_resources && that_present_allocated_resources))
        return false;
      if (!this.allocated_resources.equals(that.allocated_resources))
        return false;
    }

    boolean this_present_rejected_reservation_ids = true && this.isSetRejected_reservation_ids();
    boolean that_present_rejected_reservation_ids = true && that.isSetRejected_reservation_ids();
    if (this_present_rejected_reservation_ids || that_present_rejected_reservation_ids) {
      if (!(this_present_rejected_reservation_ids && that_present_rejected_reservation_ids))
        return false;
      if (!this.rejected_reservation_ids.equals(that.rejected_reservation_ids))
        return false;
    }

    boolean this_present_rejected_client_resource_ids = true && this.isSetRejected_client_resource_ids();
    boolean that_present_rejected_client_resource_ids = true && that.isSetRejected_client_resource_ids();
    if (this_present_rejected_client_resource_ids || that_present_rejected_client_resource_ids) {
      if (!(this_present_rejected_client_resource_ids && that_present_rejected_client_resource_ids))
        return false;
      if (!this.rejected_client_resource_ids.equals(that.rejected_client_resource_ids))
        return false;
    }

    boolean this_present_lost_client_resource_ids = true && this.isSetLost_client_resource_ids();
    boolean that_present_lost_client_resource_ids = true && that.isSetLost_client_resource_ids();
    if (this_present_lost_client_resource_ids || that_present_lost_client_resource_ids) {
      if (!(this_present_lost_client_resource_ids && that_present_lost_client_resource_ids))
        return false;
      if (!this.lost_client_resource_ids.equals(that.lost_client_resource_ids))
        return false;
    }

    boolean this_present_preempted_reservation_ids = true && this.isSetPreempted_reservation_ids();
    boolean that_present_preempted_reservation_ids = true && that.isSetPreempted_reservation_ids();
    if (this_present_preempted_reservation_ids || that_present_preempted_reservation_ids) {
      if (!(this_present_preempted_reservation_ids && that_present_preempted_reservation_ids))
        return false;
      if (!this.preempted_reservation_ids.equals(that.preempted_reservation_ids))
        return false;
    }

    boolean this_present_preempted_client_resource_ids = true && this.isSetPreempted_client_resource_ids();
    boolean that_present_preempted_client_resource_ids = true && that.isSetPreempted_client_resource_ids();
    if (this_present_preempted_client_resource_ids || that_present_preempted_client_resource_ids) {
      if (!(this_present_preempted_client_resource_ids && that_present_preempted_client_resource_ids))
        return false;
      if (!this.preempted_client_resource_ids.equals(that.preempted_client_resource_ids))
        return false;
    }

    boolean this_present_admin_released_reservation_ids = true && this.isSetAdmin_released_reservation_ids();
    boolean that_present_admin_released_reservation_ids = true && that.isSetAdmin_released_reservation_ids();
    if (this_present_admin_released_reservation_ids || that_present_admin_released_reservation_ids) {
      if (!(this_present_admin_released_reservation_ids && that_present_admin_released_reservation_ids))
        return false;
      if (!this.admin_released_reservation_ids.equals(that.admin_released_reservation_ids))
        return false;
    }

    boolean this_present_lost_reservation_ids = true && this.isSetLost_reservation_ids();
    boolean that_present_lost_reservation_ids = true && that.isSetLost_reservation_ids();
    if (this_present_lost_reservation_ids || that_present_lost_reservation_ids) {
      if (!(this_present_lost_reservation_ids && that_present_lost_reservation_ids))
        return false;
      if (!this.lost_reservation_ids.equals(that.lost_reservation_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TLlamaAMNotificationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLlamaAMNotificationRequest typedOther = (TLlamaAMNotificationRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAm_handle()).compareTo(typedOther.isSetAm_handle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAm_handle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.am_handle, typedOther.am_handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartbeat()).compareTo(typedOther.isSetHeartbeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeat, typedOther.heartbeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocated_reservation_ids()).compareTo(typedOther.isSetAllocated_reservation_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocated_reservation_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocated_reservation_ids, typedOther.allocated_reservation_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocated_resources()).compareTo(typedOther.isSetAllocated_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocated_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocated_resources, typedOther.allocated_resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRejected_reservation_ids()).compareTo(typedOther.isSetRejected_reservation_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejected_reservation_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejected_reservation_ids, typedOther.rejected_reservation_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRejected_client_resource_ids()).compareTo(typedOther.isSetRejected_client_resource_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejected_client_resource_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejected_client_resource_ids, typedOther.rejected_client_resource_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLost_client_resource_ids()).compareTo(typedOther.isSetLost_client_resource_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLost_client_resource_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lost_client_resource_ids, typedOther.lost_client_resource_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreempted_reservation_ids()).compareTo(typedOther.isSetPreempted_reservation_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreempted_reservation_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preempted_reservation_ids, typedOther.preempted_reservation_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreempted_client_resource_ids()).compareTo(typedOther.isSetPreempted_client_resource_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreempted_client_resource_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preempted_client_resource_ids, typedOther.preempted_client_resource_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmin_released_reservation_ids()).compareTo(typedOther.isSetAdmin_released_reservation_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmin_released_reservation_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin_released_reservation_ids, typedOther.admin_released_reservation_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLost_reservation_ids()).compareTo(typedOther.isSetLost_reservation_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLost_reservation_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lost_reservation_ids, typedOther.lost_reservation_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLlamaAMNotificationRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("am_handle:");
    if (this.am_handle == null) {
      sb.append("null");
    } else {
      sb.append(this.am_handle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartbeat:");
    sb.append(this.heartbeat);
    first = false;
    if (isSetAllocated_reservation_ids()) {
      if (!first) sb.append(", ");
      sb.append("allocated_reservation_ids:");
      if (this.allocated_reservation_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.allocated_reservation_ids);
      }
      first = false;
    }
    if (isSetAllocated_resources()) {
      if (!first) sb.append(", ");
      sb.append("allocated_resources:");
      if (this.allocated_resources == null) {
        sb.append("null");
      } else {
        sb.append(this.allocated_resources);
      }
      first = false;
    }
    if (isSetRejected_reservation_ids()) {
      if (!first) sb.append(", ");
      sb.append("rejected_reservation_ids:");
      if (this.rejected_reservation_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.rejected_reservation_ids);
      }
      first = false;
    }
    if (isSetRejected_client_resource_ids()) {
      if (!first) sb.append(", ");
      sb.append("rejected_client_resource_ids:");
      if (this.rejected_client_resource_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.rejected_client_resource_ids);
      }
      first = false;
    }
    if (isSetLost_client_resource_ids()) {
      if (!first) sb.append(", ");
      sb.append("lost_client_resource_ids:");
      if (this.lost_client_resource_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.lost_client_resource_ids);
      }
      first = false;
    }
    if (isSetPreempted_reservation_ids()) {
      if (!first) sb.append(", ");
      sb.append("preempted_reservation_ids:");
      if (this.preempted_reservation_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.preempted_reservation_ids);
      }
      first = false;
    }
    if (isSetPreempted_client_resource_ids()) {
      if (!first) sb.append(", ");
      sb.append("preempted_client_resource_ids:");
      if (this.preempted_client_resource_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.preempted_client_resource_ids);
      }
      first = false;
    }
    if (isSetAdmin_released_reservation_ids()) {
      if (!first) sb.append(", ");
      sb.append("admin_released_reservation_ids:");
      if (this.admin_released_reservation_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.admin_released_reservation_ids);
      }
      first = false;
    }
    if (isSetLost_reservation_ids()) {
      if (!first) sb.append(", ");
      sb.append("lost_reservation_ids:");
      if (this.lost_reservation_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.lost_reservation_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    if (am_handle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'am_handle' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'heartbeat' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (am_handle != null) {
      am_handle.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLlamaAMNotificationRequestStandardSchemeFactory implements SchemeFactory {
    public TLlamaAMNotificationRequestStandardScheme getScheme() {
      return new TLlamaAMNotificationRequestStandardScheme();
    }
  }

  private static class TLlamaAMNotificationRequestStandardScheme extends StandardScheme<TLlamaAMNotificationRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLlamaAMNotificationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AM_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.am_handle = new TUniqueId();
              struct.am_handle.read(iprot);
              struct.setAm_handleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEARTBEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.heartbeat = iprot.readBool();
              struct.setHeartbeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALLOCATED_RESERVATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.allocated_reservation_ids = new ArrayList<TUniqueId>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  TUniqueId _elem58; // required
                  _elem58 = new TUniqueId();
                  _elem58.read(iprot);
                  struct.allocated_reservation_ids.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setAllocated_reservation_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALLOCATED_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.allocated_resources = new ArrayList<TAllocatedResource>(_list59.size);
                for (int _i60 = 0; _i60 < _list59.size; ++_i60)
                {
                  TAllocatedResource _elem61; // required
                  _elem61 = new TAllocatedResource();
                  _elem61.read(iprot);
                  struct.allocated_resources.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setAllocated_resourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REJECTED_RESERVATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.rejected_reservation_ids = new ArrayList<TUniqueId>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  TUniqueId _elem64; // required
                  _elem64 = new TUniqueId();
                  _elem64.read(iprot);
                  struct.rejected_reservation_ids.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setRejected_reservation_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REJECTED_CLIENT_RESOURCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
                struct.rejected_client_resource_ids = new ArrayList<TUniqueId>(_list65.size);
                for (int _i66 = 0; _i66 < _list65.size; ++_i66)
                {
                  TUniqueId _elem67; // required
                  _elem67 = new TUniqueId();
                  _elem67.read(iprot);
                  struct.rejected_client_resource_ids.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setRejected_client_resource_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOST_CLIENT_RESOURCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.lost_client_resource_ids = new ArrayList<TUniqueId>(_list68.size);
                for (int _i69 = 0; _i69 < _list68.size; ++_i69)
                {
                  TUniqueId _elem70; // required
                  _elem70 = new TUniqueId();
                  _elem70.read(iprot);
                  struct.lost_client_resource_ids.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setLost_client_resource_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PREEMPTED_RESERVATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                struct.preempted_reservation_ids = new ArrayList<TUniqueId>(_list71.size);
                for (int _i72 = 0; _i72 < _list71.size; ++_i72)
                {
                  TUniqueId _elem73; // required
                  _elem73 = new TUniqueId();
                  _elem73.read(iprot);
                  struct.preempted_reservation_ids.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setPreempted_reservation_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PREEMPTED_CLIENT_RESOURCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                struct.preempted_client_resource_ids = new ArrayList<TUniqueId>(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  TUniqueId _elem76; // required
                  _elem76 = new TUniqueId();
                  _elem76.read(iprot);
                  struct.preempted_client_resource_ids.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setPreempted_client_resource_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADMIN_RELEASED_RESERVATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                struct.admin_released_reservation_ids = new ArrayList<TUniqueId>(_list77.size);
                for (int _i78 = 0; _i78 < _list77.size; ++_i78)
                {
                  TUniqueId _elem79; // required
                  _elem79 = new TUniqueId();
                  _elem79.read(iprot);
                  struct.admin_released_reservation_ids.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setAdmin_released_reservation_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOST_RESERVATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.lost_reservation_ids = new ArrayList<TUniqueId>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  TUniqueId _elem82; // required
                  _elem82 = new TUniqueId();
                  _elem82.read(iprot);
                  struct.lost_reservation_ids.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setLost_reservation_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHeartbeat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'heartbeat' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLlamaAMNotificationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.am_handle != null) {
        oprot.writeFieldBegin(AM_HANDLE_FIELD_DESC);
        struct.am_handle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEARTBEAT_FIELD_DESC);
      oprot.writeBool(struct.heartbeat);
      oprot.writeFieldEnd();
      if (struct.allocated_reservation_ids != null) {
        if (struct.isSetAllocated_reservation_ids()) {
          oprot.writeFieldBegin(ALLOCATED_RESERVATION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allocated_reservation_ids.size()));
            for (TUniqueId _iter83 : struct.allocated_reservation_ids)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.allocated_resources != null) {
        if (struct.isSetAllocated_resources()) {
          oprot.writeFieldBegin(ALLOCATED_RESOURCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allocated_resources.size()));
            for (TAllocatedResource _iter84 : struct.allocated_resources)
            {
              _iter84.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rejected_reservation_ids != null) {
        if (struct.isSetRejected_reservation_ids()) {
          oprot.writeFieldBegin(REJECTED_RESERVATION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rejected_reservation_ids.size()));
            for (TUniqueId _iter85 : struct.rejected_reservation_ids)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rejected_client_resource_ids != null) {
        if (struct.isSetRejected_client_resource_ids()) {
          oprot.writeFieldBegin(REJECTED_CLIENT_RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rejected_client_resource_ids.size()));
            for (TUniqueId _iter86 : struct.rejected_client_resource_ids)
            {
              _iter86.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lost_client_resource_ids != null) {
        if (struct.isSetLost_client_resource_ids()) {
          oprot.writeFieldBegin(LOST_CLIENT_RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lost_client_resource_ids.size()));
            for (TUniqueId _iter87 : struct.lost_client_resource_ids)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.preempted_reservation_ids != null) {
        if (struct.isSetPreempted_reservation_ids()) {
          oprot.writeFieldBegin(PREEMPTED_RESERVATION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.preempted_reservation_ids.size()));
            for (TUniqueId _iter88 : struct.preempted_reservation_ids)
            {
              _iter88.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.preempted_client_resource_ids != null) {
        if (struct.isSetPreempted_client_resource_ids()) {
          oprot.writeFieldBegin(PREEMPTED_CLIENT_RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.preempted_client_resource_ids.size()));
            for (TUniqueId _iter89 : struct.preempted_client_resource_ids)
            {
              _iter89.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.admin_released_reservation_ids != null) {
        if (struct.isSetAdmin_released_reservation_ids()) {
          oprot.writeFieldBegin(ADMIN_RELEASED_RESERVATION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.admin_released_reservation_ids.size()));
            for (TUniqueId _iter90 : struct.admin_released_reservation_ids)
            {
              _iter90.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lost_reservation_ids != null) {
        if (struct.isSetLost_reservation_ids()) {
          oprot.writeFieldBegin(LOST_RESERVATION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lost_reservation_ids.size()));
            for (TUniqueId _iter91 : struct.lost_reservation_ids)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLlamaAMNotificationRequestTupleSchemeFactory implements SchemeFactory {
    public TLlamaAMNotificationRequestTupleScheme getScheme() {
      return new TLlamaAMNotificationRequestTupleScheme();
    }
  }

  private static class TLlamaAMNotificationRequestTupleScheme extends TupleScheme<TLlamaAMNotificationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLlamaAMNotificationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      struct.am_handle.write(oprot);
      oprot.writeBool(struct.heartbeat);
      BitSet optionals = new BitSet();
      if (struct.isSetAllocated_reservation_ids()) {
        optionals.set(0);
      }
      if (struct.isSetAllocated_resources()) {
        optionals.set(1);
      }
      if (struct.isSetRejected_reservation_ids()) {
        optionals.set(2);
      }
      if (struct.isSetRejected_client_resource_ids()) {
        optionals.set(3);
      }
      if (struct.isSetLost_client_resource_ids()) {
        optionals.set(4);
      }
      if (struct.isSetPreempted_reservation_ids()) {
        optionals.set(5);
      }
      if (struct.isSetPreempted_client_resource_ids()) {
        optionals.set(6);
      }
      if (struct.isSetAdmin_released_reservation_ids()) {
        optionals.set(7);
      }
      if (struct.isSetLost_reservation_ids()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAllocated_reservation_ids()) {
        {
          oprot.writeI32(struct.allocated_reservation_ids.size());
          for (TUniqueId _iter92 : struct.allocated_reservation_ids)
          {
            _iter92.write(oprot);
          }
        }
      }
      if (struct.isSetAllocated_resources()) {
        {
          oprot.writeI32(struct.allocated_resources.size());
          for (TAllocatedResource _iter93 : struct.allocated_resources)
          {
            _iter93.write(oprot);
          }
        }
      }
      if (struct.isSetRejected_reservation_ids()) {
        {
          oprot.writeI32(struct.rejected_reservation_ids.size());
          for (TUniqueId _iter94 : struct.rejected_reservation_ids)
          {
            _iter94.write(oprot);
          }
        }
      }
      if (struct.isSetRejected_client_resource_ids()) {
        {
          oprot.writeI32(struct.rejected_client_resource_ids.size());
          for (TUniqueId _iter95 : struct.rejected_client_resource_ids)
          {
            _iter95.write(oprot);
          }
        }
      }
      if (struct.isSetLost_client_resource_ids()) {
        {
          oprot.writeI32(struct.lost_client_resource_ids.size());
          for (TUniqueId _iter96 : struct.lost_client_resource_ids)
          {
            _iter96.write(oprot);
          }
        }
      }
      if (struct.isSetPreempted_reservation_ids()) {
        {
          oprot.writeI32(struct.preempted_reservation_ids.size());
          for (TUniqueId _iter97 : struct.preempted_reservation_ids)
          {
            _iter97.write(oprot);
          }
        }
      }
      if (struct.isSetPreempted_client_resource_ids()) {
        {
          oprot.writeI32(struct.preempted_client_resource_ids.size());
          for (TUniqueId _iter98 : struct.preempted_client_resource_ids)
          {
            _iter98.write(oprot);
          }
        }
      }
      if (struct.isSetAdmin_released_reservation_ids()) {
        {
          oprot.writeI32(struct.admin_released_reservation_ids.size());
          for (TUniqueId _iter99 : struct.admin_released_reservation_ids)
          {
            _iter99.write(oprot);
          }
        }
      }
      if (struct.isSetLost_reservation_ids()) {
        {
          oprot.writeI32(struct.lost_reservation_ids.size());
          for (TUniqueId _iter100 : struct.lost_reservation_ids)
          {
            _iter100.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLlamaAMNotificationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      struct.am_handle = new TUniqueId();
      struct.am_handle.read(iprot);
      struct.setAm_handleIsSet(true);
      struct.heartbeat = iprot.readBool();
      struct.setHeartbeatIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.allocated_reservation_ids = new ArrayList<TUniqueId>(_list101.size);
          for (int _i102 = 0; _i102 < _list101.size; ++_i102)
          {
            TUniqueId _elem103; // required
            _elem103 = new TUniqueId();
            _elem103.read(iprot);
            struct.allocated_reservation_ids.add(_elem103);
          }
        }
        struct.setAllocated_reservation_idsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.allocated_resources = new ArrayList<TAllocatedResource>(_list104.size);
          for (int _i105 = 0; _i105 < _list104.size; ++_i105)
          {
            TAllocatedResource _elem106; // required
            _elem106 = new TAllocatedResource();
            _elem106.read(iprot);
            struct.allocated_resources.add(_elem106);
          }
        }
        struct.setAllocated_resourcesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rejected_reservation_ids = new ArrayList<TUniqueId>(_list107.size);
          for (int _i108 = 0; _i108 < _list107.size; ++_i108)
          {
            TUniqueId _elem109; // required
            _elem109 = new TUniqueId();
            _elem109.read(iprot);
            struct.rejected_reservation_ids.add(_elem109);
          }
        }
        struct.setRejected_reservation_idsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list110 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rejected_client_resource_ids = new ArrayList<TUniqueId>(_list110.size);
          for (int _i111 = 0; _i111 < _list110.size; ++_i111)
          {
            TUniqueId _elem112; // required
            _elem112 = new TUniqueId();
            _elem112.read(iprot);
            struct.rejected_client_resource_ids.add(_elem112);
          }
        }
        struct.setRejected_client_resource_idsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lost_client_resource_ids = new ArrayList<TUniqueId>(_list113.size);
          for (int _i114 = 0; _i114 < _list113.size; ++_i114)
          {
            TUniqueId _elem115; // required
            _elem115 = new TUniqueId();
            _elem115.read(iprot);
            struct.lost_client_resource_ids.add(_elem115);
          }
        }
        struct.setLost_client_resource_idsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list116 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.preempted_reservation_ids = new ArrayList<TUniqueId>(_list116.size);
          for (int _i117 = 0; _i117 < _list116.size; ++_i117)
          {
            TUniqueId _elem118; // required
            _elem118 = new TUniqueId();
            _elem118.read(iprot);
            struct.preempted_reservation_ids.add(_elem118);
          }
        }
        struct.setPreempted_reservation_idsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.preempted_client_resource_ids = new ArrayList<TUniqueId>(_list119.size);
          for (int _i120 = 0; _i120 < _list119.size; ++_i120)
          {
            TUniqueId _elem121; // required
            _elem121 = new TUniqueId();
            _elem121.read(iprot);
            struct.preempted_client_resource_ids.add(_elem121);
          }
        }
        struct.setPreempted_client_resource_idsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.admin_released_reservation_ids = new ArrayList<TUniqueId>(_list122.size);
          for (int _i123 = 0; _i123 < _list122.size; ++_i123)
          {
            TUniqueId _elem124; // required
            _elem124 = new TUniqueId();
            _elem124.read(iprot);
            struct.admin_released_reservation_ids.add(_elem124);
          }
        }
        struct.setAdmin_released_reservation_idsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lost_reservation_ids = new ArrayList<TUniqueId>(_list125.size);
          for (int _i126 = 0; _i126 < _list125.size; ++_i126)
          {
            TUniqueId _elem127; // required
            _elem127 = new TUniqueId();
            _elem127.read(iprot);
            struct.lost_reservation_ids.add(_elem127);
          }
        }
        struct.setLost_reservation_idsIsSet(true);
      }
    }
  }

}

