/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.llama.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TLlamaAMAdminEmptyCacheRequest implements org.apache.thrift.TBase<TLlamaAMAdminEmptyCacheRequest, TLlamaAMAdminEmptyCacheRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLlamaAMAdminEmptyCacheRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_QUEUES_FIELD_DESC = new org.apache.thrift.protocol.TField("allQueues", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUES_FIELD_DESC = new org.apache.thrift.protocol.TField("queues", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLlamaAMAdminEmptyCacheRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLlamaAMAdminEmptyCacheRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion version; // required
  public boolean allQueues; // optional
  public List<String> queues; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TLlamaServiceVersion
     */
    VERSION((short)1, "version"),
    ALL_QUEUES((short)2, "allQueues"),
    QUEUES((short)3, "queues");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // ALL_QUEUES
          return ALL_QUEUES;
        case 3: // QUEUES
          return QUEUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALLQUEUES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ALL_QUEUES, _Fields.QUEUES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLlamaServiceVersion.class)));
    tmpMap.put(_Fields.ALL_QUEUES, new org.apache.thrift.meta_data.FieldMetaData("allQueues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUEUES, new org.apache.thrift.meta_data.FieldMetaData("queues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLlamaAMAdminEmptyCacheRequest.class, metaDataMap);
  }

  public TLlamaAMAdminEmptyCacheRequest() {
    this.allQueues = false;

  }

  public TLlamaAMAdminEmptyCacheRequest(
    TLlamaServiceVersion version)
  {
    this();
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLlamaAMAdminEmptyCacheRequest(TLlamaAMAdminEmptyCacheRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.allQueues = other.allQueues;
    if (other.isSetQueues()) {
      List<String> __this__queues = new ArrayList<String>();
      for (String other_element : other.queues) {
        __this__queues.add(other_element);
      }
      this.queues = __this__queues;
    }
  }

  public TLlamaAMAdminEmptyCacheRequest deepCopy() {
    return new TLlamaAMAdminEmptyCacheRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.allQueues = false;

    this.queues = null;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaAMAdminEmptyCacheRequest setVersion(TLlamaServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public boolean isAllQueues() {
    return this.allQueues;
  }

  public TLlamaAMAdminEmptyCacheRequest setAllQueues(boolean allQueues) {
    this.allQueues = allQueues;
    setAllQueuesIsSet(true);
    return this;
  }

  public void unsetAllQueues() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLQUEUES_ISSET_ID);
  }

  /** Returns true if field allQueues is set (has been assigned a value) and false otherwise */
  public boolean isSetAllQueues() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLQUEUES_ISSET_ID);
  }

  public void setAllQueuesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLQUEUES_ISSET_ID, value);
  }

  public int getQueuesSize() {
    return (this.queues == null) ? 0 : this.queues.size();
  }

  public java.util.Iterator<String> getQueuesIterator() {
    return (this.queues == null) ? null : this.queues.iterator();
  }

  public void addToQueues(String elem) {
    if (this.queues == null) {
      this.queues = new ArrayList<String>();
    }
    this.queues.add(elem);
  }

  public List<String> getQueues() {
    return this.queues;
  }

  public TLlamaAMAdminEmptyCacheRequest setQueues(List<String> queues) {
    this.queues = queues;
    return this;
  }

  public void unsetQueues() {
    this.queues = null;
  }

  /** Returns true if field queues is set (has been assigned a value) and false otherwise */
  public boolean isSetQueues() {
    return this.queues != null;
  }

  public void setQueuesIsSet(boolean value) {
    if (!value) {
      this.queues = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TLlamaServiceVersion)value);
      }
      break;

    case ALL_QUEUES:
      if (value == null) {
        unsetAllQueues();
      } else {
        setAllQueues((Boolean)value);
      }
      break;

    case QUEUES:
      if (value == null) {
        unsetQueues();
      } else {
        setQueues((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case ALL_QUEUES:
      return Boolean.valueOf(isAllQueues());

    case QUEUES:
      return getQueues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case ALL_QUEUES:
      return isSetAllQueues();
    case QUEUES:
      return isSetQueues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLlamaAMAdminEmptyCacheRequest)
      return this.equals((TLlamaAMAdminEmptyCacheRequest)that);
    return false;
  }

  public boolean equals(TLlamaAMAdminEmptyCacheRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_allQueues = true && this.isSetAllQueues();
    boolean that_present_allQueues = true && that.isSetAllQueues();
    if (this_present_allQueues || that_present_allQueues) {
      if (!(this_present_allQueues && that_present_allQueues))
        return false;
      if (this.allQueues != that.allQueues)
        return false;
    }

    boolean this_present_queues = true && this.isSetQueues();
    boolean that_present_queues = true && that.isSetQueues();
    if (this_present_queues || that_present_queues) {
      if (!(this_present_queues && that_present_queues))
        return false;
      if (!this.queues.equals(that.queues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TLlamaAMAdminEmptyCacheRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLlamaAMAdminEmptyCacheRequest typedOther = (TLlamaAMAdminEmptyCacheRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllQueues()).compareTo(typedOther.isSetAllQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllQueues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allQueues, typedOther.allQueues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueues()).compareTo(typedOther.isSetQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queues, typedOther.queues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLlamaAMAdminEmptyCacheRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetAllQueues()) {
      if (!first) sb.append(", ");
      sb.append("allQueues:");
      sb.append(this.allQueues);
      first = false;
    }
    if (isSetQueues()) {
      if (!first) sb.append(", ");
      sb.append("queues:");
      if (this.queues == null) {
        sb.append("null");
      } else {
        sb.append(this.queues);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLlamaAMAdminEmptyCacheRequestStandardSchemeFactory implements SchemeFactory {
    public TLlamaAMAdminEmptyCacheRequestStandardScheme getScheme() {
      return new TLlamaAMAdminEmptyCacheRequestStandardScheme();
    }
  }

  private static class TLlamaAMAdminEmptyCacheRequestStandardScheme extends StandardScheme<TLlamaAMAdminEmptyCacheRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLlamaAMAdminEmptyCacheRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL_QUEUES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allQueues = iprot.readBool();
              struct.setAllQueuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.queues = new ArrayList<String>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  String _elem50; // required
                  _elem50 = iprot.readString();
                  struct.queues.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setQueuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLlamaAMAdminEmptyCacheRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllQueues()) {
        oprot.writeFieldBegin(ALL_QUEUES_FIELD_DESC);
        oprot.writeBool(struct.allQueues);
        oprot.writeFieldEnd();
      }
      if (struct.queues != null) {
        if (struct.isSetQueues()) {
          oprot.writeFieldBegin(QUEUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.queues.size()));
            for (String _iter51 : struct.queues)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLlamaAMAdminEmptyCacheRequestTupleSchemeFactory implements SchemeFactory {
    public TLlamaAMAdminEmptyCacheRequestTupleScheme getScheme() {
      return new TLlamaAMAdminEmptyCacheRequestTupleScheme();
    }
  }

  private static class TLlamaAMAdminEmptyCacheRequestTupleScheme extends TupleScheme<TLlamaAMAdminEmptyCacheRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLlamaAMAdminEmptyCacheRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetAllQueues()) {
        optionals.set(0);
      }
      if (struct.isSetQueues()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAllQueues()) {
        oprot.writeBool(struct.allQueues);
      }
      if (struct.isSetQueues()) {
        {
          oprot.writeI32(struct.queues.size());
          for (String _iter52 : struct.queues)
          {
            oprot.writeString(_iter52);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLlamaAMAdminEmptyCacheRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.allQueues = iprot.readBool();
        struct.setAllQueuesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.queues = new ArrayList<String>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            String _elem55; // required
            _elem55 = iprot.readString();
            struct.queues.add(_elem55);
          }
        }
        struct.setQueuesIsSet(true);
      }
    }
  }

}

