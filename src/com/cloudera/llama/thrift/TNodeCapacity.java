/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.llama.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TNodeCapacity implements org.apache.thrift.TBase<TNodeCapacity, TNodeCapacity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNodeCapacity");

  private static final org.apache.thrift.protocol.TField TOTAL_V_CPU_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_v_cpu_cores", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_MEMORY_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("total_memory_mb", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FREE_V_CPU_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("free_v_cpu_cores", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField FREE_MEMORY_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("free_memory_mb", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNodeCapacityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNodeCapacityTupleSchemeFactory());
  }

  public short total_v_cpu_cores; // required
  public int total_memory_mb; // required
  public short free_v_cpu_cores; // required
  public int free_memory_mb; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_V_CPU_CORES((short)1, "total_v_cpu_cores"),
    TOTAL_MEMORY_MB((short)2, "total_memory_mb"),
    FREE_V_CPU_CORES((short)3, "free_v_cpu_cores"),
    FREE_MEMORY_MB((short)4, "free_memory_mb");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_V_CPU_CORES
          return TOTAL_V_CPU_CORES;
        case 2: // TOTAL_MEMORY_MB
          return TOTAL_MEMORY_MB;
        case 3: // FREE_V_CPU_CORES
          return FREE_V_CPU_CORES;
        case 4: // FREE_MEMORY_MB
          return FREE_MEMORY_MB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_V_CPU_CORES_ISSET_ID = 0;
  private static final int __TOTAL_MEMORY_MB_ISSET_ID = 1;
  private static final int __FREE_V_CPU_CORES_ISSET_ID = 2;
  private static final int __FREE_MEMORY_MB_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_V_CPU_CORES, new org.apache.thrift.meta_data.FieldMetaData("total_v_cpu_cores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TOTAL_MEMORY_MB, new org.apache.thrift.meta_data.FieldMetaData("total_memory_mb", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREE_V_CPU_CORES, new org.apache.thrift.meta_data.FieldMetaData("free_v_cpu_cores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FREE_MEMORY_MB, new org.apache.thrift.meta_data.FieldMetaData("free_memory_mb", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNodeCapacity.class, metaDataMap);
  }

  public TNodeCapacity() {
  }

  public TNodeCapacity(
    short total_v_cpu_cores,
    int total_memory_mb,
    short free_v_cpu_cores,
    int free_memory_mb)
  {
    this();
    this.total_v_cpu_cores = total_v_cpu_cores;
    setTotal_v_cpu_coresIsSet(true);
    this.total_memory_mb = total_memory_mb;
    setTotal_memory_mbIsSet(true);
    this.free_v_cpu_cores = free_v_cpu_cores;
    setFree_v_cpu_coresIsSet(true);
    this.free_memory_mb = free_memory_mb;
    setFree_memory_mbIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNodeCapacity(TNodeCapacity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.total_v_cpu_cores = other.total_v_cpu_cores;
    this.total_memory_mb = other.total_memory_mb;
    this.free_v_cpu_cores = other.free_v_cpu_cores;
    this.free_memory_mb = other.free_memory_mb;
  }

  public TNodeCapacity deepCopy() {
    return new TNodeCapacity(this);
  }

  @Override
  public void clear() {
    setTotal_v_cpu_coresIsSet(false);
    this.total_v_cpu_cores = 0;
    setTotal_memory_mbIsSet(false);
    this.total_memory_mb = 0;
    setFree_v_cpu_coresIsSet(false);
    this.free_v_cpu_cores = 0;
    setFree_memory_mbIsSet(false);
    this.free_memory_mb = 0;
  }

  public short getTotal_v_cpu_cores() {
    return this.total_v_cpu_cores;
  }

  public TNodeCapacity setTotal_v_cpu_cores(short total_v_cpu_cores) {
    this.total_v_cpu_cores = total_v_cpu_cores;
    setTotal_v_cpu_coresIsSet(true);
    return this;
  }

  public void unsetTotal_v_cpu_cores() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_V_CPU_CORES_ISSET_ID);
  }

  /** Returns true if field total_v_cpu_cores is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_v_cpu_cores() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_V_CPU_CORES_ISSET_ID);
  }

  public void setTotal_v_cpu_coresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_V_CPU_CORES_ISSET_ID, value);
  }

  public int getTotal_memory_mb() {
    return this.total_memory_mb;
  }

  public TNodeCapacity setTotal_memory_mb(int total_memory_mb) {
    this.total_memory_mb = total_memory_mb;
    setTotal_memory_mbIsSet(true);
    return this;
  }

  public void unsetTotal_memory_mb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_MEMORY_MB_ISSET_ID);
  }

  /** Returns true if field total_memory_mb is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_memory_mb() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_MEMORY_MB_ISSET_ID);
  }

  public void setTotal_memory_mbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_MEMORY_MB_ISSET_ID, value);
  }

  public short getFree_v_cpu_cores() {
    return this.free_v_cpu_cores;
  }

  public TNodeCapacity setFree_v_cpu_cores(short free_v_cpu_cores) {
    this.free_v_cpu_cores = free_v_cpu_cores;
    setFree_v_cpu_coresIsSet(true);
    return this;
  }

  public void unsetFree_v_cpu_cores() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREE_V_CPU_CORES_ISSET_ID);
  }

  /** Returns true if field free_v_cpu_cores is set (has been assigned a value) and false otherwise */
  public boolean isSetFree_v_cpu_cores() {
    return EncodingUtils.testBit(__isset_bitfield, __FREE_V_CPU_CORES_ISSET_ID);
  }

  public void setFree_v_cpu_coresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREE_V_CPU_CORES_ISSET_ID, value);
  }

  public int getFree_memory_mb() {
    return this.free_memory_mb;
  }

  public TNodeCapacity setFree_memory_mb(int free_memory_mb) {
    this.free_memory_mb = free_memory_mb;
    setFree_memory_mbIsSet(true);
    return this;
  }

  public void unsetFree_memory_mb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREE_MEMORY_MB_ISSET_ID);
  }

  /** Returns true if field free_memory_mb is set (has been assigned a value) and false otherwise */
  public boolean isSetFree_memory_mb() {
    return EncodingUtils.testBit(__isset_bitfield, __FREE_MEMORY_MB_ISSET_ID);
  }

  public void setFree_memory_mbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREE_MEMORY_MB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_V_CPU_CORES:
      if (value == null) {
        unsetTotal_v_cpu_cores();
      } else {
        setTotal_v_cpu_cores((Short)value);
      }
      break;

    case TOTAL_MEMORY_MB:
      if (value == null) {
        unsetTotal_memory_mb();
      } else {
        setTotal_memory_mb((Integer)value);
      }
      break;

    case FREE_V_CPU_CORES:
      if (value == null) {
        unsetFree_v_cpu_cores();
      } else {
        setFree_v_cpu_cores((Short)value);
      }
      break;

    case FREE_MEMORY_MB:
      if (value == null) {
        unsetFree_memory_mb();
      } else {
        setFree_memory_mb((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_V_CPU_CORES:
      return Short.valueOf(getTotal_v_cpu_cores());

    case TOTAL_MEMORY_MB:
      return Integer.valueOf(getTotal_memory_mb());

    case FREE_V_CPU_CORES:
      return Short.valueOf(getFree_v_cpu_cores());

    case FREE_MEMORY_MB:
      return Integer.valueOf(getFree_memory_mb());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_V_CPU_CORES:
      return isSetTotal_v_cpu_cores();
    case TOTAL_MEMORY_MB:
      return isSetTotal_memory_mb();
    case FREE_V_CPU_CORES:
      return isSetFree_v_cpu_cores();
    case FREE_MEMORY_MB:
      return isSetFree_memory_mb();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNodeCapacity)
      return this.equals((TNodeCapacity)that);
    return false;
  }

  public boolean equals(TNodeCapacity that) {
    if (that == null)
      return false;

    boolean this_present_total_v_cpu_cores = true;
    boolean that_present_total_v_cpu_cores = true;
    if (this_present_total_v_cpu_cores || that_present_total_v_cpu_cores) {
      if (!(this_present_total_v_cpu_cores && that_present_total_v_cpu_cores))
        return false;
      if (this.total_v_cpu_cores != that.total_v_cpu_cores)
        return false;
    }

    boolean this_present_total_memory_mb = true;
    boolean that_present_total_memory_mb = true;
    if (this_present_total_memory_mb || that_present_total_memory_mb) {
      if (!(this_present_total_memory_mb && that_present_total_memory_mb))
        return false;
      if (this.total_memory_mb != that.total_memory_mb)
        return false;
    }

    boolean this_present_free_v_cpu_cores = true;
    boolean that_present_free_v_cpu_cores = true;
    if (this_present_free_v_cpu_cores || that_present_free_v_cpu_cores) {
      if (!(this_present_free_v_cpu_cores && that_present_free_v_cpu_cores))
        return false;
      if (this.free_v_cpu_cores != that.free_v_cpu_cores)
        return false;
    }

    boolean this_present_free_memory_mb = true;
    boolean that_present_free_memory_mb = true;
    if (this_present_free_memory_mb || that_present_free_memory_mb) {
      if (!(this_present_free_memory_mb && that_present_free_memory_mb))
        return false;
      if (this.free_memory_mb != that.free_memory_mb)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TNodeCapacity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TNodeCapacity typedOther = (TNodeCapacity)other;

    lastComparison = Boolean.valueOf(isSetTotal_v_cpu_cores()).compareTo(typedOther.isSetTotal_v_cpu_cores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_v_cpu_cores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_v_cpu_cores, typedOther.total_v_cpu_cores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_memory_mb()).compareTo(typedOther.isSetTotal_memory_mb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_memory_mb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_memory_mb, typedOther.total_memory_mb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree_v_cpu_cores()).compareTo(typedOther.isSetFree_v_cpu_cores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree_v_cpu_cores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free_v_cpu_cores, typedOther.free_v_cpu_cores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFree_memory_mb()).compareTo(typedOther.isSetFree_memory_mb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFree_memory_mb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.free_memory_mb, typedOther.free_memory_mb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNodeCapacity(");
    boolean first = true;

    sb.append("total_v_cpu_cores:");
    sb.append(this.total_v_cpu_cores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_memory_mb:");
    sb.append(this.total_memory_mb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("free_v_cpu_cores:");
    sb.append(this.free_v_cpu_cores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("free_memory_mb:");
    sb.append(this.free_memory_mb);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'total_v_cpu_cores' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'total_memory_mb' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'free_v_cpu_cores' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'free_memory_mb' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNodeCapacityStandardSchemeFactory implements SchemeFactory {
    public TNodeCapacityStandardScheme getScheme() {
      return new TNodeCapacityStandardScheme();
    }
  }

  private static class TNodeCapacityStandardScheme extends StandardScheme<TNodeCapacity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNodeCapacity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_V_CPU_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.total_v_cpu_cores = iprot.readI16();
              struct.setTotal_v_cpu_coresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_MEMORY_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total_memory_mb = iprot.readI32();
              struct.setTotal_memory_mbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FREE_V_CPU_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.free_v_cpu_cores = iprot.readI16();
              struct.setFree_v_cpu_coresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FREE_MEMORY_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.free_memory_mb = iprot.readI32();
              struct.setFree_memory_mbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotal_v_cpu_cores()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'total_v_cpu_cores' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotal_memory_mb()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'total_memory_mb' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFree_v_cpu_cores()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'free_v_cpu_cores' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFree_memory_mb()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'free_memory_mb' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNodeCapacity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_V_CPU_CORES_FIELD_DESC);
      oprot.writeI16(struct.total_v_cpu_cores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MEMORY_MB_FIELD_DESC);
      oprot.writeI32(struct.total_memory_mb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_V_CPU_CORES_FIELD_DESC);
      oprot.writeI16(struct.free_v_cpu_cores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_MEMORY_MB_FIELD_DESC);
      oprot.writeI32(struct.free_memory_mb);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNodeCapacityTupleSchemeFactory implements SchemeFactory {
    public TNodeCapacityTupleScheme getScheme() {
      return new TNodeCapacityTupleScheme();
    }
  }

  private static class TNodeCapacityTupleScheme extends TupleScheme<TNodeCapacity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNodeCapacity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.total_v_cpu_cores);
      oprot.writeI32(struct.total_memory_mb);
      oprot.writeI16(struct.free_v_cpu_cores);
      oprot.writeI32(struct.free_memory_mb);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNodeCapacity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.total_v_cpu_cores = iprot.readI16();
      struct.setTotal_v_cpu_coresIsSet(true);
      struct.total_memory_mb = iprot.readI32();
      struct.setTotal_memory_mbIsSet(true);
      struct.free_v_cpu_cores = iprot.readI16();
      struct.setFree_v_cpu_coresIsSet(true);
      struct.free_memory_mb = iprot.readI32();
      struct.setFree_memory_mbIsSet(true);
    }
  }

}

