/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.llama.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TLlamaAMReservationRequest implements org.apache.thrift.TBase<TLlamaAMReservationRequest, TLlamaAMReservationRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLlamaAMReservationRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AM_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("am_handle", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUEUE_FIELD_DESC = new org.apache.thrift.protocol.TField("queue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("resources", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField GANG_FIELD_DESC = new org.apache.thrift.protocol.TField("gang", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField RESERVATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reservation_id", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLlamaAMReservationRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLlamaAMReservationRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion version; // required
  public TUniqueId am_handle; // required
  public String user; // required
  public String queue; // optional
  public List<TResource> resources; // required
  public boolean gang; // required
  public TUniqueId reservation_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TLlamaServiceVersion
     */
    VERSION((short)1, "version"),
    AM_HANDLE((short)2, "am_handle"),
    USER((short)3, "user"),
    QUEUE((short)4, "queue"),
    RESOURCES((short)5, "resources"),
    GANG((short)6, "gang"),
    RESERVATION_ID((short)7, "reservation_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // AM_HANDLE
          return AM_HANDLE;
        case 3: // USER
          return USER;
        case 4: // QUEUE
          return QUEUE;
        case 5: // RESOURCES
          return RESOURCES;
        case 6: // GANG
          return GANG;
        case 7: // RESERVATION_ID
          return RESERVATION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GANG_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.QUEUE, _Fields.RESERVATION_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLlamaServiceVersion.class)));
    tmpMap.put(_Fields.AM_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("am_handle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUEUE, new org.apache.thrift.meta_data.FieldMetaData("queue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("resources", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResource.class))));
    tmpMap.put(_Fields.GANG, new org.apache.thrift.meta_data.FieldMetaData("gang", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESERVATION_ID, new org.apache.thrift.meta_data.FieldMetaData("reservation_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLlamaAMReservationRequest.class, metaDataMap);
  }

  public TLlamaAMReservationRequest() {
  }

  public TLlamaAMReservationRequest(
    TLlamaServiceVersion version,
    TUniqueId am_handle,
    String user,
    List<TResource> resources,
    boolean gang)
  {
    this();
    this.version = version;
    this.am_handle = am_handle;
    this.user = user;
    this.resources = resources;
    this.gang = gang;
    setGangIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLlamaAMReservationRequest(TLlamaAMReservationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetAm_handle()) {
      this.am_handle = new TUniqueId(other.am_handle);
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetQueue()) {
      this.queue = other.queue;
    }
    if (other.isSetResources()) {
      List<TResource> __this__resources = new ArrayList<TResource>();
      for (TResource other_element : other.resources) {
        __this__resources.add(new TResource(other_element));
      }
      this.resources = __this__resources;
    }
    this.gang = other.gang;
    if (other.isSetReservation_id()) {
      this.reservation_id = new TUniqueId(other.reservation_id);
    }
  }

  public TLlamaAMReservationRequest deepCopy() {
    return new TLlamaAMReservationRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.am_handle = null;
    this.user = null;
    this.queue = null;
    this.resources = null;
    setGangIsSet(false);
    this.gang = false;
    this.reservation_id = null;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaAMReservationRequest setVersion(TLlamaServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public TUniqueId getAm_handle() {
    return this.am_handle;
  }

  public TLlamaAMReservationRequest setAm_handle(TUniqueId am_handle) {
    this.am_handle = am_handle;
    return this;
  }

  public void unsetAm_handle() {
    this.am_handle = null;
  }

  /** Returns true if field am_handle is set (has been assigned a value) and false otherwise */
  public boolean isSetAm_handle() {
    return this.am_handle != null;
  }

  public void setAm_handleIsSet(boolean value) {
    if (!value) {
      this.am_handle = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public TLlamaAMReservationRequest setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getQueue() {
    return this.queue;
  }

  public TLlamaAMReservationRequest setQueue(String queue) {
    this.queue = queue;
    return this;
  }

  public void unsetQueue() {
    this.queue = null;
  }

  /** Returns true if field queue is set (has been assigned a value) and false otherwise */
  public boolean isSetQueue() {
    return this.queue != null;
  }

  public void setQueueIsSet(boolean value) {
    if (!value) {
      this.queue = null;
    }
  }

  public int getResourcesSize() {
    return (this.resources == null) ? 0 : this.resources.size();
  }

  public java.util.Iterator<TResource> getResourcesIterator() {
    return (this.resources == null) ? null : this.resources.iterator();
  }

  public void addToResources(TResource elem) {
    if (this.resources == null) {
      this.resources = new ArrayList<TResource>();
    }
    this.resources.add(elem);
  }

  public List<TResource> getResources() {
    return this.resources;
  }

  public TLlamaAMReservationRequest setResources(List<TResource> resources) {
    this.resources = resources;
    return this;
  }

  public void unsetResources() {
    this.resources = null;
  }

  /** Returns true if field resources is set (has been assigned a value) and false otherwise */
  public boolean isSetResources() {
    return this.resources != null;
  }

  public void setResourcesIsSet(boolean value) {
    if (!value) {
      this.resources = null;
    }
  }

  public boolean isGang() {
    return this.gang;
  }

  public TLlamaAMReservationRequest setGang(boolean gang) {
    this.gang = gang;
    setGangIsSet(true);
    return this;
  }

  public void unsetGang() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GANG_ISSET_ID);
  }

  /** Returns true if field gang is set (has been assigned a value) and false otherwise */
  public boolean isSetGang() {
    return EncodingUtils.testBit(__isset_bitfield, __GANG_ISSET_ID);
  }

  public void setGangIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GANG_ISSET_ID, value);
  }

  public TUniqueId getReservation_id() {
    return this.reservation_id;
  }

  public TLlamaAMReservationRequest setReservation_id(TUniqueId reservation_id) {
    this.reservation_id = reservation_id;
    return this;
  }

  public void unsetReservation_id() {
    this.reservation_id = null;
  }

  /** Returns true if field reservation_id is set (has been assigned a value) and false otherwise */
  public boolean isSetReservation_id() {
    return this.reservation_id != null;
  }

  public void setReservation_idIsSet(boolean value) {
    if (!value) {
      this.reservation_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TLlamaServiceVersion)value);
      }
      break;

    case AM_HANDLE:
      if (value == null) {
        unsetAm_handle();
      } else {
        setAm_handle((TUniqueId)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case QUEUE:
      if (value == null) {
        unsetQueue();
      } else {
        setQueue((String)value);
      }
      break;

    case RESOURCES:
      if (value == null) {
        unsetResources();
      } else {
        setResources((List<TResource>)value);
      }
      break;

    case GANG:
      if (value == null) {
        unsetGang();
      } else {
        setGang((Boolean)value);
      }
      break;

    case RESERVATION_ID:
      if (value == null) {
        unsetReservation_id();
      } else {
        setReservation_id((TUniqueId)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case AM_HANDLE:
      return getAm_handle();

    case USER:
      return getUser();

    case QUEUE:
      return getQueue();

    case RESOURCES:
      return getResources();

    case GANG:
      return Boolean.valueOf(isGang());

    case RESERVATION_ID:
      return getReservation_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case AM_HANDLE:
      return isSetAm_handle();
    case USER:
      return isSetUser();
    case QUEUE:
      return isSetQueue();
    case RESOURCES:
      return isSetResources();
    case GANG:
      return isSetGang();
    case RESERVATION_ID:
      return isSetReservation_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLlamaAMReservationRequest)
      return this.equals((TLlamaAMReservationRequest)that);
    return false;
  }

  public boolean equals(TLlamaAMReservationRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_am_handle = true && this.isSetAm_handle();
    boolean that_present_am_handle = true && that.isSetAm_handle();
    if (this_present_am_handle || that_present_am_handle) {
      if (!(this_present_am_handle && that_present_am_handle))
        return false;
      if (!this.am_handle.equals(that.am_handle))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_queue = true && this.isSetQueue();
    boolean that_present_queue = true && that.isSetQueue();
    if (this_present_queue || that_present_queue) {
      if (!(this_present_queue && that_present_queue))
        return false;
      if (!this.queue.equals(that.queue))
        return false;
    }

    boolean this_present_resources = true && this.isSetResources();
    boolean that_present_resources = true && that.isSetResources();
    if (this_present_resources || that_present_resources) {
      if (!(this_present_resources && that_present_resources))
        return false;
      if (!this.resources.equals(that.resources))
        return false;
    }

    boolean this_present_gang = true;
    boolean that_present_gang = true;
    if (this_present_gang || that_present_gang) {
      if (!(this_present_gang && that_present_gang))
        return false;
      if (this.gang != that.gang)
        return false;
    }

    boolean this_present_reservation_id = true && this.isSetReservation_id();
    boolean that_present_reservation_id = true && that.isSetReservation_id();
    if (this_present_reservation_id || that_present_reservation_id) {
      if (!(this_present_reservation_id && that_present_reservation_id))
        return false;
      if (!this.reservation_id.equals(that.reservation_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TLlamaAMReservationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLlamaAMReservationRequest typedOther = (TLlamaAMReservationRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAm_handle()).compareTo(typedOther.isSetAm_handle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAm_handle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.am_handle, typedOther.am_handle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueue()).compareTo(typedOther.isSetQueue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queue, typedOther.queue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResources()).compareTo(typedOther.isSetResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources, typedOther.resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGang()).compareTo(typedOther.isSetGang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gang, typedOther.gang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservation_id()).compareTo(typedOther.isSetReservation_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservation_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservation_id, typedOther.reservation_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLlamaAMReservationRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("am_handle:");
    if (this.am_handle == null) {
      sb.append("null");
    } else {
      sb.append(this.am_handle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (isSetQueue()) {
      if (!first) sb.append(", ");
      sb.append("queue:");
      if (this.queue == null) {
        sb.append("null");
      } else {
        sb.append(this.queue);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("resources:");
    if (this.resources == null) {
      sb.append("null");
    } else {
      sb.append(this.resources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gang:");
    sb.append(this.gang);
    first = false;
    if (isSetReservation_id()) {
      if (!first) sb.append(", ");
      sb.append("reservation_id:");
      if (this.reservation_id == null) {
        sb.append("null");
      } else {
        sb.append(this.reservation_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    if (am_handle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'am_handle' was not present! Struct: " + toString());
    }
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (resources == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resources' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'gang' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (am_handle != null) {
      am_handle.validate();
    }
    if (reservation_id != null) {
      reservation_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLlamaAMReservationRequestStandardSchemeFactory implements SchemeFactory {
    public TLlamaAMReservationRequestStandardScheme getScheme() {
      return new TLlamaAMReservationRequestStandardScheme();
    }
  }

  private static class TLlamaAMReservationRequestStandardScheme extends StandardScheme<TLlamaAMReservationRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLlamaAMReservationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AM_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.am_handle = new TUniqueId();
              struct.am_handle.read(iprot);
              struct.setAm_handleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUEUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queue = iprot.readString();
              struct.setQueueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.resources = new ArrayList<TResource>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  TResource _elem10; // required
                  _elem10 = new TResource();
                  _elem10.read(iprot);
                  struct.resources.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GANG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gang = iprot.readBool();
              struct.setGangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESERVATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reservation_id = new TUniqueId();
              struct.reservation_id.read(iprot);
              struct.setReservation_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGang()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gang' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLlamaAMReservationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.am_handle != null) {
        oprot.writeFieldBegin(AM_HANDLE_FIELD_DESC);
        struct.am_handle.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.queue != null) {
        if (struct.isSetQueue()) {
          oprot.writeFieldBegin(QUEUE_FIELD_DESC);
          oprot.writeString(struct.queue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resources != null) {
        oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resources.size()));
          for (TResource _iter11 : struct.resources)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GANG_FIELD_DESC);
      oprot.writeBool(struct.gang);
      oprot.writeFieldEnd();
      if (struct.reservation_id != null) {
        if (struct.isSetReservation_id()) {
          oprot.writeFieldBegin(RESERVATION_ID_FIELD_DESC);
          struct.reservation_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLlamaAMReservationRequestTupleSchemeFactory implements SchemeFactory {
    public TLlamaAMReservationRequestTupleScheme getScheme() {
      return new TLlamaAMReservationRequestTupleScheme();
    }
  }

  private static class TLlamaAMReservationRequestTupleScheme extends TupleScheme<TLlamaAMReservationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLlamaAMReservationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      struct.am_handle.write(oprot);
      oprot.writeString(struct.user);
      {
        oprot.writeI32(struct.resources.size());
        for (TResource _iter12 : struct.resources)
        {
          _iter12.write(oprot);
        }
      }
      oprot.writeBool(struct.gang);
      BitSet optionals = new BitSet();
      if (struct.isSetQueue()) {
        optionals.set(0);
      }
      if (struct.isSetReservation_id()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetQueue()) {
        oprot.writeString(struct.queue);
      }
      if (struct.isSetReservation_id()) {
        struct.reservation_id.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLlamaAMReservationRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      struct.am_handle = new TUniqueId();
      struct.am_handle.read(iprot);
      struct.setAm_handleIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.resources = new ArrayList<TResource>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          TResource _elem15; // required
          _elem15 = new TResource();
          _elem15.read(iprot);
          struct.resources.add(_elem15);
        }
      }
      struct.setResourcesIsSet(true);
      struct.gang = iprot.readBool();
      struct.setGangIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.queue = iprot.readString();
        struct.setQueueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reservation_id = new TUniqueId();
        struct.reservation_id.read(iprot);
        struct.setReservation_idIsSet(true);
      }
    }
  }

}

