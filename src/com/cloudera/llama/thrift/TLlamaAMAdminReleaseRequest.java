/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.llama.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TLlamaAMAdminReleaseRequest implements org.apache.thrift.TBase<TLlamaAMAdminReleaseRequest, TLlamaAMAdminReleaseRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLlamaAMAdminReleaseRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DO_NOT_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("do_not_cache", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUES_FIELD_DESC = new org.apache.thrift.protocol.TField("queues", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField HANDLES_FIELD_DESC = new org.apache.thrift.protocol.TField("handles", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RESERVATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("reservations", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLlamaAMAdminReleaseRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLlamaAMAdminReleaseRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion version; // required
  public boolean do_not_cache; // optional
  public List<String> queues; // optional
  public List<TUniqueId> handles; // optional
  public List<TUniqueId> reservations; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TLlamaServiceVersion
     */
    VERSION((short)1, "version"),
    DO_NOT_CACHE((short)2, "do_not_cache"),
    QUEUES((short)3, "queues"),
    HANDLES((short)4, "handles"),
    RESERVATIONS((short)5, "reservations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // DO_NOT_CACHE
          return DO_NOT_CACHE;
        case 3: // QUEUES
          return QUEUES;
        case 4: // HANDLES
          return HANDLES;
        case 5: // RESERVATIONS
          return RESERVATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DO_NOT_CACHE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DO_NOT_CACHE, _Fields.QUEUES, _Fields.HANDLES, _Fields.RESERVATIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLlamaServiceVersion.class)));
    tmpMap.put(_Fields.DO_NOT_CACHE, new org.apache.thrift.meta_data.FieldMetaData("do_not_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUEUES, new org.apache.thrift.meta_data.FieldMetaData("queues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HANDLES, new org.apache.thrift.meta_data.FieldMetaData("handles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    tmpMap.put(_Fields.RESERVATIONS, new org.apache.thrift.meta_data.FieldMetaData("reservations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUniqueId.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLlamaAMAdminReleaseRequest.class, metaDataMap);
  }

  public TLlamaAMAdminReleaseRequest() {
    this.do_not_cache = false;

  }

  public TLlamaAMAdminReleaseRequest(
    TLlamaServiceVersion version)
  {
    this();
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLlamaAMAdminReleaseRequest(TLlamaAMAdminReleaseRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.do_not_cache = other.do_not_cache;
    if (other.isSetQueues()) {
      List<String> __this__queues = new ArrayList<String>();
      for (String other_element : other.queues) {
        __this__queues.add(other_element);
      }
      this.queues = __this__queues;
    }
    if (other.isSetHandles()) {
      List<TUniqueId> __this__handles = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.handles) {
        __this__handles.add(new TUniqueId(other_element));
      }
      this.handles = __this__handles;
    }
    if (other.isSetReservations()) {
      List<TUniqueId> __this__reservations = new ArrayList<TUniqueId>();
      for (TUniqueId other_element : other.reservations) {
        __this__reservations.add(new TUniqueId(other_element));
      }
      this.reservations = __this__reservations;
    }
  }

  public TLlamaAMAdminReleaseRequest deepCopy() {
    return new TLlamaAMAdminReleaseRequest(this);
  }

  @Override
  public void clear() {
    this.version = null;
    this.do_not_cache = false;

    this.queues = null;
    this.handles = null;
    this.reservations = null;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaServiceVersion getVersion() {
    return this.version;
  }

  /**
   * 
   * @see TLlamaServiceVersion
   */
  public TLlamaAMAdminReleaseRequest setVersion(TLlamaServiceVersion version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public boolean isDo_not_cache() {
    return this.do_not_cache;
  }

  public TLlamaAMAdminReleaseRequest setDo_not_cache(boolean do_not_cache) {
    this.do_not_cache = do_not_cache;
    setDo_not_cacheIsSet(true);
    return this;
  }

  public void unsetDo_not_cache() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DO_NOT_CACHE_ISSET_ID);
  }

  /** Returns true if field do_not_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetDo_not_cache() {
    return EncodingUtils.testBit(__isset_bitfield, __DO_NOT_CACHE_ISSET_ID);
  }

  public void setDo_not_cacheIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DO_NOT_CACHE_ISSET_ID, value);
  }

  public int getQueuesSize() {
    return (this.queues == null) ? 0 : this.queues.size();
  }

  public java.util.Iterator<String> getQueuesIterator() {
    return (this.queues == null) ? null : this.queues.iterator();
  }

  public void addToQueues(String elem) {
    if (this.queues == null) {
      this.queues = new ArrayList<String>();
    }
    this.queues.add(elem);
  }

  public List<String> getQueues() {
    return this.queues;
  }

  public TLlamaAMAdminReleaseRequest setQueues(List<String> queues) {
    this.queues = queues;
    return this;
  }

  public void unsetQueues() {
    this.queues = null;
  }

  /** Returns true if field queues is set (has been assigned a value) and false otherwise */
  public boolean isSetQueues() {
    return this.queues != null;
  }

  public void setQueuesIsSet(boolean value) {
    if (!value) {
      this.queues = null;
    }
  }

  public int getHandlesSize() {
    return (this.handles == null) ? 0 : this.handles.size();
  }

  public java.util.Iterator<TUniqueId> getHandlesIterator() {
    return (this.handles == null) ? null : this.handles.iterator();
  }

  public void addToHandles(TUniqueId elem) {
    if (this.handles == null) {
      this.handles = new ArrayList<TUniqueId>();
    }
    this.handles.add(elem);
  }

  public List<TUniqueId> getHandles() {
    return this.handles;
  }

  public TLlamaAMAdminReleaseRequest setHandles(List<TUniqueId> handles) {
    this.handles = handles;
    return this;
  }

  public void unsetHandles() {
    this.handles = null;
  }

  /** Returns true if field handles is set (has been assigned a value) and false otherwise */
  public boolean isSetHandles() {
    return this.handles != null;
  }

  public void setHandlesIsSet(boolean value) {
    if (!value) {
      this.handles = null;
    }
  }

  public int getReservationsSize() {
    return (this.reservations == null) ? 0 : this.reservations.size();
  }

  public java.util.Iterator<TUniqueId> getReservationsIterator() {
    return (this.reservations == null) ? null : this.reservations.iterator();
  }

  public void addToReservations(TUniqueId elem) {
    if (this.reservations == null) {
      this.reservations = new ArrayList<TUniqueId>();
    }
    this.reservations.add(elem);
  }

  public List<TUniqueId> getReservations() {
    return this.reservations;
  }

  public TLlamaAMAdminReleaseRequest setReservations(List<TUniqueId> reservations) {
    this.reservations = reservations;
    return this;
  }

  public void unsetReservations() {
    this.reservations = null;
  }

  /** Returns true if field reservations is set (has been assigned a value) and false otherwise */
  public boolean isSetReservations() {
    return this.reservations != null;
  }

  public void setReservationsIsSet(boolean value) {
    if (!value) {
      this.reservations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((TLlamaServiceVersion)value);
      }
      break;

    case DO_NOT_CACHE:
      if (value == null) {
        unsetDo_not_cache();
      } else {
        setDo_not_cache((Boolean)value);
      }
      break;

    case QUEUES:
      if (value == null) {
        unsetQueues();
      } else {
        setQueues((List<String>)value);
      }
      break;

    case HANDLES:
      if (value == null) {
        unsetHandles();
      } else {
        setHandles((List<TUniqueId>)value);
      }
      break;

    case RESERVATIONS:
      if (value == null) {
        unsetReservations();
      } else {
        setReservations((List<TUniqueId>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case DO_NOT_CACHE:
      return Boolean.valueOf(isDo_not_cache());

    case QUEUES:
      return getQueues();

    case HANDLES:
      return getHandles();

    case RESERVATIONS:
      return getReservations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case DO_NOT_CACHE:
      return isSetDo_not_cache();
    case QUEUES:
      return isSetQueues();
    case HANDLES:
      return isSetHandles();
    case RESERVATIONS:
      return isSetReservations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLlamaAMAdminReleaseRequest)
      return this.equals((TLlamaAMAdminReleaseRequest)that);
    return false;
  }

  public boolean equals(TLlamaAMAdminReleaseRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_do_not_cache = true && this.isSetDo_not_cache();
    boolean that_present_do_not_cache = true && that.isSetDo_not_cache();
    if (this_present_do_not_cache || that_present_do_not_cache) {
      if (!(this_present_do_not_cache && that_present_do_not_cache))
        return false;
      if (this.do_not_cache != that.do_not_cache)
        return false;
    }

    boolean this_present_queues = true && this.isSetQueues();
    boolean that_present_queues = true && that.isSetQueues();
    if (this_present_queues || that_present_queues) {
      if (!(this_present_queues && that_present_queues))
        return false;
      if (!this.queues.equals(that.queues))
        return false;
    }

    boolean this_present_handles = true && this.isSetHandles();
    boolean that_present_handles = true && that.isSetHandles();
    if (this_present_handles || that_present_handles) {
      if (!(this_present_handles && that_present_handles))
        return false;
      if (!this.handles.equals(that.handles))
        return false;
    }

    boolean this_present_reservations = true && this.isSetReservations();
    boolean that_present_reservations = true && that.isSetReservations();
    if (this_present_reservations || that_present_reservations) {
      if (!(this_present_reservations && that_present_reservations))
        return false;
      if (!this.reservations.equals(that.reservations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TLlamaAMAdminReleaseRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLlamaAMAdminReleaseRequest typedOther = (TLlamaAMAdminReleaseRequest)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDo_not_cache()).compareTo(typedOther.isSetDo_not_cache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDo_not_cache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.do_not_cache, typedOther.do_not_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueues()).compareTo(typedOther.isSetQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queues, typedOther.queues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandles()).compareTo(typedOther.isSetHandles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handles, typedOther.handles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservations()).compareTo(typedOther.isSetReservations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservations, typedOther.reservations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLlamaAMAdminReleaseRequest(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetDo_not_cache()) {
      if (!first) sb.append(", ");
      sb.append("do_not_cache:");
      sb.append(this.do_not_cache);
      first = false;
    }
    if (isSetQueues()) {
      if (!first) sb.append(", ");
      sb.append("queues:");
      if (this.queues == null) {
        sb.append("null");
      } else {
        sb.append(this.queues);
      }
      first = false;
    }
    if (isSetHandles()) {
      if (!first) sb.append(", ");
      sb.append("handles:");
      if (this.handles == null) {
        sb.append("null");
      } else {
        sb.append(this.handles);
      }
      first = false;
    }
    if (isSetReservations()) {
      if (!first) sb.append(", ");
      sb.append("reservations:");
      if (this.reservations == null) {
        sb.append("null");
      } else {
        sb.append(this.reservations);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLlamaAMAdminReleaseRequestStandardSchemeFactory implements SchemeFactory {
    public TLlamaAMAdminReleaseRequestStandardScheme getScheme() {
      return new TLlamaAMAdminReleaseRequestStandardScheme();
    }
  }

  private static class TLlamaAMAdminReleaseRequestStandardScheme extends StandardScheme<TLlamaAMAdminReleaseRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLlamaAMAdminReleaseRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DO_NOT_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.do_not_cache = iprot.readBool();
              struct.setDo_not_cacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.queues = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26; // required
                  _elem26 = iprot.readString();
                  struct.queues.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setQueuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HANDLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.handles = new ArrayList<TUniqueId>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  TUniqueId _elem29; // required
                  _elem29 = new TUniqueId();
                  _elem29.read(iprot);
                  struct.handles.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setHandlesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESERVATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.reservations = new ArrayList<TUniqueId>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  TUniqueId _elem32; // required
                  _elem32 = new TUniqueId();
                  _elem32.read(iprot);
                  struct.reservations.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setReservationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLlamaAMAdminReleaseRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetDo_not_cache()) {
        oprot.writeFieldBegin(DO_NOT_CACHE_FIELD_DESC);
        oprot.writeBool(struct.do_not_cache);
        oprot.writeFieldEnd();
      }
      if (struct.queues != null) {
        if (struct.isSetQueues()) {
          oprot.writeFieldBegin(QUEUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.queues.size()));
            for (String _iter33 : struct.queues)
            {
              oprot.writeString(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.handles != null) {
        if (struct.isSetHandles()) {
          oprot.writeFieldBegin(HANDLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.handles.size()));
            for (TUniqueId _iter34 : struct.handles)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.reservations != null) {
        if (struct.isSetReservations()) {
          oprot.writeFieldBegin(RESERVATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.reservations.size()));
            for (TUniqueId _iter35 : struct.reservations)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLlamaAMAdminReleaseRequestTupleSchemeFactory implements SchemeFactory {
    public TLlamaAMAdminReleaseRequestTupleScheme getScheme() {
      return new TLlamaAMAdminReleaseRequestTupleScheme();
    }
  }

  private static class TLlamaAMAdminReleaseRequestTupleScheme extends TupleScheme<TLlamaAMAdminReleaseRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLlamaAMAdminReleaseRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetDo_not_cache()) {
        optionals.set(0);
      }
      if (struct.isSetQueues()) {
        optionals.set(1);
      }
      if (struct.isSetHandles()) {
        optionals.set(2);
      }
      if (struct.isSetReservations()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDo_not_cache()) {
        oprot.writeBool(struct.do_not_cache);
      }
      if (struct.isSetQueues()) {
        {
          oprot.writeI32(struct.queues.size());
          for (String _iter36 : struct.queues)
          {
            oprot.writeString(_iter36);
          }
        }
      }
      if (struct.isSetHandles()) {
        {
          oprot.writeI32(struct.handles.size());
          for (TUniqueId _iter37 : struct.handles)
          {
            _iter37.write(oprot);
          }
        }
      }
      if (struct.isSetReservations()) {
        {
          oprot.writeI32(struct.reservations.size());
          for (TUniqueId _iter38 : struct.reservations)
          {
            _iter38.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLlamaAMAdminReleaseRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = TLlamaServiceVersion.findByValue(iprot.readI32());
      struct.setVersionIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.do_not_cache = iprot.readBool();
        struct.setDo_not_cacheIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.queues = new ArrayList<String>(_list39.size);
          for (int _i40 = 0; _i40 < _list39.size; ++_i40)
          {
            String _elem41; // required
            _elem41 = iprot.readString();
            struct.queues.add(_elem41);
          }
        }
        struct.setQueuesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.handles = new ArrayList<TUniqueId>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            TUniqueId _elem44; // required
            _elem44 = new TUniqueId();
            _elem44.read(iprot);
            struct.handles.add(_elem44);
          }
        }
        struct.setHandlesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.reservations = new ArrayList<TUniqueId>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            TUniqueId _elem47; // required
            _elem47 = new TUniqueId();
            _elem47.read(iprot);
            struct.reservations.add(_elem47);
          }
        }
        struct.setReservationsIsSet(true);
      }
    }
  }

}

